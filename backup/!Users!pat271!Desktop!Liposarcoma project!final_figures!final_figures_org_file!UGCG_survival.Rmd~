---
title: UGCG Survival Analysis
author: "Andrew Patt"
date: "`r format(Sys.time(), '%d %B, %Y')`"
output:
  pdf_document:
    keep_tex: true
---

```{r,echo=FALSE}
knitr::opts_chunk$set(message=FALSE,warning=FALSE, 
                      fig.height=10,fig.width = 12,fig.fullwidth = TRUE,
                      echo=FALSE,tidy=TRUE)
```

I'm attempting to replicate the finding that UGCG expression is linked to survival in the TCGA SARC cohort. I first found that there is no association between UGCG expression and survival in the DDLPS subcohort. This is even after including age at diagnosis as a predictor, which is what was used to produce the result in the original Rmarkdown file.

## Notes
+ TCGA data are RSEM normalized. 
+ **[My clinical data were taken from here.](https://portal.gdc.cancer.gov/projects/TCGA-SARC)**
+ I notice from Dr. Awasthi's plots that he seems to have survival data for every sample in DDLPS, whereas the data I was looking at only had 26/58 nonmissing values. This is almost certainly the source of the discrepancy. I would like to know his source of survival data.

# Survival Analysis, DDLPS subtype only

```{r, loadData}
setwd("~/Desktop/Liposarcoma project/Gene Microarray Analysis/TCGA_Sarcoma_RNAseq/")
if (!require("RJSONIO")) {
  source("https://bioconductor.org/biocLite.R")
  biocLite("RJSONIO")
  library(RJSONIO)
}
fb <- function(COHORT) {
  paste("http://gdac.broadinstitute.org/runs/stddata__2016_01_28/data/",
        COHORT,
        "/20160128/gdac.broadinstitute.org_",
        COHORT,
        ".Merge_rnaseqv2__illuminahiseq_rnaseqv2__unc_edu__Level_3__",
        "RSEM_genes_normalized__data.Level_3.2016012800.0.0.tar.gz",
        sep="")
}

fetch <- function(COHORT) {
  dataurl <- fb(COHORT)
  fname <- basename(dataurl)
  download.file(dataurl, fname)
  cat("uncompressing\n", file=stderr())
  untar(fname, compressed="gzip") # gunzip and untar
  unlink(fname) # remove the tar.gz version
  localdir <- sub(".tar.gz", "", fname)
  cat("Creating a binary R object\n", file=stderr())
  datasrc <- file.path(localdir, dir(localdir, pattern="RSEM"))
  dumbheads <- read.table(datasrc, sep="\t", header=TRUE, nrows=1, row.names=1)
  ncounts <- read.table(datasrc, sep="\t", header=FALSE, skip=2, row.names=1)
  colnames(ncounts) <- colnames(dumbheads)
  ncounts <- as.matrix(ncounts)
  rm(localdir, datasrc, dumbheads)
  ncounts
}

f <- "sarcoma.Rda"
if (file.exists(f)) {
  load(f)
} else {
  sarc <- fetch("SARC")
  save(sarc, file=f)
}
rm(f)

clinical_data<-read.table(
    file="~/Desktop/Liposarcoma project/Gene Microarray Analysis/TCGA_Sarcoma_RNAseq/clinical.tsv",
                          sep = '\t', header = TRUE)

sarcSampleType <- substring(colnames(sarc), 14, 15)
#table(sarcSampleType)

sarcSampleID <- substring(colnames(sarc), 1, 12)
DDLPS_ids<-as.vector(clinical_data$submitter_id)
DDLPS_ids<-gsub("-","\\.",DDLPS_ids)

DDLPS<-sarc[,match(DDLPS_ids,sarcSampleID)]
DDLPS_SampleType<-sarcSampleType[match(DDLPS_ids,sarcSampleID)]
## Want to look at primary solid tumor only
sarc_01<-DDLPS[,DDLPS_SampleType == "01"]

## Log transform
NS <- log2(1 + sarc_01)
NS<-NS[,which(!is.na(colnames(NS)))]
## Get gene names and remove duplicates
gn <- unlist(lapply(strsplit(rownames(NS), "\\|"), function(x) x[1]))
dup <- sapply(gn, function(x) return(duplicated(x) || x == '\\?'))
## dup <- duplicated(gn)
NS <- NS[!dup,]
gn <- gn[!dup]
```

```{r,filterAndScale}
library(tidyverse)
library(cowplot)
filterAndPlot<-function(data,med_cutoff=.25,SD_cutoff=.25,gn.=gn){
    plot.df<-as.data.frame(as.vector(data))
    colnames(plot.df)<-"data"
    median <- apply(data, 1, median)
    cutoff<-sort(median)[ceiling(length(median)*med_cutoff)]
    high_med <- median > cutoff

    p1<-ggplot(plot.df,aes(x=data)) +
        geom_density(fill="red",alpha=0.5,adjust = 1/2) +
        theme_classic() +
        ggtitle("Global transcript abundance density, pre abundance filtration") +
        geom_vline(xintercept=cutoff)

    sd<-apply(data,1,sd)
    plot.df<-as.data.frame(sd)
    colnames(plot.df)<-"sd"
    cutoff<-sort(sd)[ceiling(length(sd)*SD_cutoff)]
    high_sd <- sd > cutoff

    p3<-ggplot(plot.df,aes(x=sd)) +
        geom_density(fill="purple",alpha=0.5,adjust = 1/2) +
        theme_classic() +
        ggtitle("Transcript sd, pre sd filtration") +
        geom_vline(xintercept=cutoff)

    data <- data[high_med & high_sd,]
    gn <- gn[high_med & high_sd]
    
    plot.df<-as.data.frame(as.vector(data))
    colnames(plot.df)<-"data"
    p2<-ggplot(plot.df,aes(x=data)) +
        geom_density(fill="red",alpha=0.5,adjust = 1/2) +
        theme_classic() +
        ggtitle("Global transcript abundance density, post abundance filtration")    
    
    sd<-as.data.frame(apply(data,1,sd))
    #mean<-as.data.frame(apply(data,1,mean))
    #CV<-sd/mean
    colnames(sd)<-"sd"
    p4<-ggplot(sd,aes(x=sd)) +
        geom_density(fill="purple",alpha=0.5,adjust = 1/2) +
        theme_classic() +
        ggtitle("Transcript sd, post sd filtration")

    plotlist<-list(p1,p2,p3,p4)
return(list(data,gn,plotlist))
}

pcaPlot<-function(data){
    mypca=prcomp(t(data),center=T,scale=T)
    percvar=round((mypca$sdev)^2 / sum(mypca$sdev^2)*100,2)
    mydf=data.frame(PC1=mypca$x[,"PC1"],PC2=mypca$x[,"PC2"])
    p <- ggplot(mydf,aes(PC1,PC2)) +
        geom_point(aes(PC1,PC2),size=4) +
        xlab(paste0("PC1: ",percvar[1],"% variance")) +
        ylab(paste0("PC2: ",percvar[2],"% variance")) +
        theme_bw() +
        theme(axis.line = element_line(colour = "black"),
              axis.title=element_text(size=12,face="bold"),
              plot.title=element_text(size=14,face="bold"),
              panel.grid.major = element_blank(),
              panel.grid.minor = element_blank(),
              panel.background = element_blank(),
              legend.key=element_blank())
    return(p)
}

filtered_data<-filterAndPlot(NS,med_cutoff=0.4,SD_cutoff=0.25)
NS<-filtered_data[[1]]
gn<-filtered_data[[2]]
plotlist<-filtered_data[[3]]
##plot_grid(plotlist=plotlist,ncol=2)
```

```{r, PCA_plot}
##pcaPlot(NS)+ggtitle("TCGA PCA")

MDM2_ind<-which(gn=="MDM2")
UGCG_ind<-which(gn=="UGCG")
UGCG_TCGA<-data.frame(MDM2=NS[MDM2_ind,],UGCG=NS[UGCG_ind,])

TCGA_Z_Scores<-scale(NS)
```

```{r, survival,echo=TRUE}
library(survival)
## Get the order the same so we can incorporate MDM2 status
substrLeft <- function(x, n){
  substr(x, 1, n)
}

UGCG_ind <- which(gn=="UGCG")

sample_order_NS<-sapply(colnames(NS), substrLeft, n=12)

reorder_cd <- match(DDLPS_ids,as.vector(sample_order_NS))
reorder_cd <- reorder_cd[!is.na(reorder_cd)]
clinical_data <- clinical_data[as.numeric(reorder_cd),]
clinical_data$UGCG_expression <- NS[UGCG_ind,]
clinical_data$MDM2_expression <- NS[MDM2_ind,]

days_to_death_numeric<-apply(clinical_data,1, function(x){ifelse(x[16]=="--",return(as.numeric(x[25])),return(as.numeric(x[16])))})
status<-sapply(as.vector(clinical_data$days_to_death),function(x) ifelse(x=="--",return(0),return(1)))
clinical_data$days_to_death<-days_to_death_numeric
clinical_data$survival_status<-status

library(survminer)
sf <- survfit( Surv(days_to_death,status) ~ 1, data = clinical_data)
ggsurvplot(sf,ggtheme = theme_minimal())

fitcox <- coxph(Surv(days_to_death, status) ~ UGCG_expression + age_at_diagnosis, data = clinical_data)
summary(fitcox)

```

Trying with MDM2 again just in case

```{r, survival_MDM2_DDLPS,echo=TRUE}
fitcox <- coxph(Surv(days_to_death, status) ~ MDM2_expression + age_at_diagnosis, data = clinical_data)
summary(fitcox)

```

No dice.

# Survival Analysis with Full Cohort

Now trying in the full sarcoma cohort of 256 rather than the 54 DDLPS samples (It appears that the original study by Jim's postdoc was done on the 54 however). Again I was unable to reproduce.

```{r, reloadData_fullCohort}
clinical_data<-read.table(file="~/Desktop/Liposarcoma project/Gene Microarray Analysis/TCGA_Sarcoma_RNAseq/clinical_unfiltered.tsv",
                          sep = '\t', header = TRUE)

sarcSampleType <- substring(colnames(sarc), 14, 15)
#table(sarcSampleType)

sarcSampleID <- substring(colnames(sarc), 1, 12)
Full_ids<-as.vector(clinical_data$submitter_id)
Full_ids<-gsub("-","\\.",Full_ids)

Full<-sarc[,match(Full_ids,sarcSampleID)]
Full_SampleType<-sarcSampleType[match(Full_ids,sarcSampleID)]
## Want to look at primary solid tumor only
sarc_01<-Full[,Full_SampleType == "01"]

## Log transform
NS <- log2(1 + sarc_01)
NS<-NS[,which(!is.na(colnames(NS)))]
## Get gene names and remove duplicates
gn <- unlist(lapply(strsplit(rownames(NS), "\\|"), function(x) x[1]))
dup <- sapply(gn, function(x) return(duplicated(x) || x == '\\?'))
## dup <- duplicated(gn)
NS <- NS[!dup,]
gn <- gn[!dup]
```

```{r,filterAndScale_fullCohort}

filtered_data<-filterAndPlot(NS,med_cutoff=0.4,SD_cutoff=0.25)
NS<-filtered_data[[1]]
gn<-filtered_data[[2]]
plotlist<-filtered_data[[3]]
##plot_grid(plotlist=plotlist,ncol=2)
```


```{r, PCA_plot_fullCohort}

##pcaPlot(NS)+ggtitle("TCGA PCA")

MDM2_ind<-which(gn=="MDM2")
UGCG_ind<-which(gn=="UGCG")
UGCG_TCGA<-data.frame(MDM2=NS[MDM2_ind,],UGCG=NS[UGCG_ind,])

TCGA_Z_Scores<-scale(NS)
```

```{r, survivalAnalysis_fullCohort,echo=TRUE}

UGCG_ind <- which(gn=="UGCG")

sample_order_NS<-sapply(colnames(NS), substrLeft, n=12)

reorder_cd <- match(Full_ids,as.vector(sample_order_NS))
reorder_cd <- reorder_cd[!is.na(reorder_cd)]
clinical_data <- clinical_data[as.numeric(reorder_cd),]
clinical_data$UGCG_expression <- NS[UGCG_ind,]
clinical_data$MDM2_expression <- NS[MDM2_ind,]

days_to_death_numeric<-apply(clinical_data,1, function(x){ifelse(x[16]=="--",return(as.numeric(x[25])),return(as.numeric(x[16])))})
status<-sapply(as.vector(clinical_data$days_to_death),function(x) ifelse(x=="--",return(0),return(1)))

clinical_data$days_to_death<-days_to_death_numeric
clinical_data$survival_status<-status
clinical_data$age_at_diagnosis<-as.integer(as.character(clinical_data$age_at_diagnosis))

sf <- survfit( Surv(days_to_death,status) ~ 1, data = clinical_data)
ggsurvplot(sf,ggtheme = theme_minimal())

fitcox <- coxph(Surv(days_to_death, status) ~ UGCG_expression + age_at_diagnosis, data = clinical_data)
summary(fitcox)

```

```{r, survival_MDM2_fullCohort,echo=TRUE}
fitcox <- coxph(Surv(days_to_death, status) ~ MDM2_expression + age_at_diagnosis, data = clinical_data)
summary(fitcox)

```
