#+DATE: [2019-02-12 Tue]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
#+DESCRIPTION:
#+TITLE: Transcriptomic Analysis: Barretina Analysis
#+AUTHOR: Andrew Patt

* Load data
#+header: :width 8 :height 10 :R-dev-args
#+begin_src R :session "transcriptomics" :results graphics output :exports results
  setwd("~/Desktop/Liposarcoma project/Gene Microarray Analysis/")
  if (!require("GEOquery")) {
    source("https://bioconductor.org/biocLite.R")
    biocLite("GEOquery")
    library(GEOquery)
  }
  if (!require("affy")) {
    source("https://bioconductor.org/biocLite.R")
    biocLite("affy")
    library(affy)
  }
   if (!require("oligo")) {
     source("https://bioconductor.org/biocLite.R")
     biocLite("oligo")
     library(oligo)
   }
  if (!require("limma")) {
    source("https://bioconductor.org/biocLite.R")
    biocLite("limma")
    library(limma)
  }
  if (!require("lumi")) {
    source("https://bioconductor.org/biocLite.R")
    biocLite("lumi")
  library(lumi)
  }
  if (!require("vsn")) {
    source("https://bioconductor.org/biocLite.R")
    biocLite("vsn")
    library(vsn)
  }


  f <- "GSE21124.Rda"
  if (file.exists(f)) {
    load(f)
  } else {
      gset <- getGEO("GSE21124", GSEMatrix =TRUE, getGPL=FALSE)
      if (length(gset) > 1) idx <- grep("GPL96", attr(gset, "names")) else idx <- 1
      gset <- gset[[idx]]
      gsms <- paste0("0000000000000000000000000000000000000000000000XXXX",
	  "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
	  "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX1",
	  "11111111")
      sml <- c()
      for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
      sml <- paste("G", sml, sep="")
      sel <- which(sml != "GX")
      sml <- sml[sel]
      gset <- gset[ ,sel]
      save(gset,file=f)
  }
  rm(f)

  if (file.exists("locns_GSE21124.Rda")) {
      load("locns_GSE21124.Rda")
  } else {
      locns_GSE21124 <- getGEOSuppFiles("GSE21124")
      save(locns_GSE21124, file="locns_GSE21124.Rda")
  }

  setwd("GSE21124/GSE21124_RAW")

  barretina_eset<-gset
  barretina_data_exprs<-exprs(barretina_eset)

  celFiles<- unlist(list.files(pattern=".CEL.gz",full.names=TRUE))
  gsms <- sapply(celFiles, function(x) {
    sample <- gsub("./","",x)
    sample <- gsub(".CEL.gz","",sample)
    if(sample %in% colnames(barretina_data_exprs)){
      return(0)
    }else{
      file.remove(x)
    }
  })

  DD_indices <- gregexpr('0', gsms)[[1]]
  DDcelFiles<-celFiles[DD_indices]
  barretina_data<-ReadAffy(filenames = DDcelFiles)

  library("annotate")
  library("hgu133a.db")

  probes<-affy::geneNames(barretina_data)
  ## Create a table that translates affyProbes to gene symbols
  OUT <- select(hgu133a.db, probes, c("SYMBOL", "ENTREZID", "GENENAME", "ENSEMBL"))

#+end_src

* Filter and plot data function
#+header: :width 8 :height 10 :R-dev-args
#+begin_src R :session "transcriptomics" :results graphics output :exports results
  filterAndPlot<-function(data,med_cutoff=.25,SD_cutoff=.25,gn.=gn){
    plot.df<-as.data.frame(as.vector(data))
    colnames(plot.df)<-"data"
    median <- apply(data, 1, median)
    cutoff<-sort(median)[ceiling(length(median)*med_cutoff)]
    high_med <- median > cutoff

    p1<-ggplot(plot.df,aes(x=data)) +
      geom_density(fill="red",alpha=0.5,adjust = 1/2) +
      theme_classic() +
      ggtitle("Global transcript abundance density, pre abundance filtration") +
      geom_vline(xintercept=cutoff)

    sd<-apply(data,1,sd)
    plot.df<-as.data.frame(sd)
    colnames(plot.df)<-"sd"
    cutoff<-sort(sd)[ceiling(length(sd)*SD_cutoff)]
    high_sd <- sd > cutoff

    p3<-ggplot(plot.df,aes(x=sd)) +
      geom_density(fill="purple",alpha=0.5,adjust = 1/2) +
      theme_classic() +
      ggtitle("Transcript sd, pre sd filtration") +
      geom_vline(xintercept=cutoff)

    data <- data[high_med & high_sd,]
    gn <- gn[high_med & high_sd]

    plot.df<-as.data.frame(as.vector(data))
    colnames(plot.df)<-"data"
    p2<-ggplot(plot.df,aes(x=data)) +
      geom_density(fill="red",alpha=0.5,adjust = 1/2) +
      theme_classic() +
      ggtitle("Global transcript abundance density, post abundance filtration")    

    sd<-as.data.frame(apply(data,1,sd))
    colnames(sd)<-"sd"
    p4<-ggplot(sd,aes(x=sd)) +
      geom_density(fill="purple",alpha=0.5,adjust = 1/2) +
      theme_classic() +
      ggtitle("Transcript sd, post sd filtration")

    plotlist<-list(p1,p2,p3,p4)
    return(list(data,gn,plotlist))
  }
#+end_src

* Remove duplicate probes and filter 
#+header: :width 8 :height 10 :R-dev-args
#+begin_src R :session "transcriptomics" :results graphics output :exports results
  ###########################
  # Deduplicate
  ###########################
  barretina_data_exprs <- log2(1 + barretina_data_exprs)
  gn<-OUT$SYMBOL[match(rownames(barretina_data_exprs),OUT$PROBEID)]
  ensembl<-OUT$ENSEMBL[match(rownames(barretina_data_exprs),OUT$PROBEID)]

  barretina_data_exprs <- barretina_data_exprs[-is.na(ensembl),]
  gn <- gn[-is.na(ensembl)]
  ensembl <- ensembl[-is.na(ensembl)]

  indices <- c()
  for(x in unique(ensembl)){
      probes<-which(ensembl==x)
      if(length(probes)==1){
	  indices <- c(indices,probes)
      }else{
	  probe_medians<-apply(barretina_data_exprs[probes,],1,median)
	  output<-probes[which.max(probe_medians)]
	  indices <- c(indices,output)
      }
  }

  barretina_data_exprs<-barretina_data_exprs[indices,]
  gn<-gn[indices]
  ###########################

  ############################################################################
  ## Filter                                                                 ##
  ############################################################################
  library(ggplot2)
  filtered_data<-filterAndPlot(barretina_data_exprs,med_cutoff=0.4,SD_cutoff=0.25)
  barretina_data_exprs<-filtered_data[[1]]
  gn<-filtered_data[[2]]
  plotlist<-filtered_data[[3]]
  ############################
  healthy_data_exprs<-barretina_data_exprs[,47:ncol(barretina_data_exprs)]
  barretina_data_exprs <- barretina_data_exprs[,1:46]
  #############################

  MDM2_Probe<-which(gn=="MDM2")
  MDM2_correlations_barretina<-apply(barretina_data_exprs[-MDM2_Probe,],1,function(x) return(cor(x,barretina_data_exprs[MDM2_Probe,],method="spearman")))
  MDM2_corr_test_barretina<-apply(barretina_data_exprs[-MDM2_Probe,],1,function(x) return(cor.test(x,barretina_data_exprs[MDM2_Probe,],method="spearman")$p.value))
  pval_plot_barretina<-qplot(MDM2_corr_test_barretina,bins=500)+theme_classic()+xlab("Unadjusted Spearman P value")
  MDM2_corr_test_barretina_adj<-p.adjust(MDM2_corr_test_barretina,method="fdr")

  MDM2_correlations_barretina<-data.frame(MDM2_correlations_barretina,MDM2_corr_test_barretina_adj,gn[-MDM2_Probe])
  MDM2_correlations_barretina<-MDM2_correlations_barretina[order(MDM2_correlations_barretina[,2]),]

  ceramide_genes<-c("UGCG","ABCB1","PLEKHA8","GBA","GALC","ASAH1","DEGS1","DEGS2","SMPD1","SMPD2","SMPD3","SMPD4","ENPP7",
		      "ACER1","ACER2","ASAH1","ASAH2","SGMS1","SGMS2","SPTLC1","SPTLC2","SPTLC3")
  MDM2_correlations_barretina_sig<-MDM2_correlations_barretina[MDM2_correlations_barretina[,2]<0.05,]
  intersect(ceramide_genes,MDM2_correlations_barretina_sig$gn..MDM2_Probe.)

  probe_corr_plotter<-function(gene){
    indices<-which(gn==gene)
    out<-lapply(indices, function(x){
      probe = barretina_data_exprs[x,]
      plot_df <- data.frame(MDM2=barretina_data_exprs[MDM2_Probe,], probe)
      p<-ggplot(plot_df, aes(x=MDM2,y=probe)) +
	geom_point() +
	theme_classic() +
	geom_smooth(method=lm,color="black") +
	ylab(gene) +
	guides(color = FALSE)
      return(p)
    })
    return(out)
  }

  ##plot_grid(plotlist = unlist(lapply(intersect(ceramide_genes,MDM2_correlations_barretina$gn..MDM2_Probe.),probe_corr_plotter),recursive=FALSE),
  ##	    ncol=3)

  ##MDM2_correlations_barretina_sig

  ############################################################################
  ## Differential Expression ## (healthy vs normal) ##
  ############################################################################
  diff_expr <- sapply(1:nrow(barretina_data_exprs), function(x){
    return(t.test(barretina_data_exprs[x,],healthy_data_exprs[x,])$p.value)
  })
  diff_expr<-p.adjust(diff_expr,method="fdr")










#+end_src
