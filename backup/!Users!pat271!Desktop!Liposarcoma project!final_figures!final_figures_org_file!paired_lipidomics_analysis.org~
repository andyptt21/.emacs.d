#+TITLE: Paired analysis of lipidomic data
#+AUTHOR: Andrew Patt
#+DESCRIPTION: These are just the figures which will be in the final paper, with minor edits to ensure consistency of font size, etc.

In order to perform paired analysis, we need to match paired samples together.
* Building a key of sample pairs
#+BEGIN_SRC R :session "global" :results output :exports both
library(tidyverse)
setwd("~/Desktop/Liposarcoma project/Lipidyzer/")
sample_IDs<-read.csv("~/Desktop/Liposarcoma project/Lipidyzer/Sample_IDs.csv")
sample_info<-read.csv("Cell_Run_Order.csv")

POS_Numbers<-c()
for(i in 1:82){
  POS_Numbers<-c(POS_Numbers,strsplit(strsplit(as.character(sample_IDs$POSITIVE[i]),"_")[[1]][2],"-")[[1]][1])
}

POS_Cell_Lines<-c()
for(i in 1:82){
  POS_Cell_Lines<-c(POS_Cell_Lines,strsplit(as.character(sample_IDs$POSITIVE[i]),"-")[[1]][2])
}

POS_MDM2_Status<-c()
for(i in POS_Cell_Lines){
  index<-match(i,sample_info$Number)
  POS_MDM2_Status<-c(POS_MDM2_Status,as.character(sample_info$CellLine[index]))
}

POS_MDM2_Status<-sapply(POS_MDM2_Status, function(x) if (x %in% mdm2lo_groups){return("Low")} else if (x %in% mdm2hi_groups){return("High")} else return(NA))

POS_Treatment_Status<-c()
for(i in POS_Cell_Lines){
  index<-match(i,sample_info$Number)
  POS_Treatment_Status<-c(POS_Treatment_Status,as.character(sample_info$Treatment[index]))
}

POS_medium<-c()
for(i in POS_Cell_Lines){
  index<-match(i,sample_info$Number)
  POS_medium<-c(POS_medium,as.character(sample_info$Media[index]))
}

POS_sample_info<-data.frame(Run_Order=POS_Numbers,Number=POS_Cell_Lines,MDM2_status=POS_MDM2_Status,Treatment_Status=POS_Treatment_Status, Medium=POS_medium)

POS_sample_info<-POS_sample_info[-52,]
POS_sample_info<-POS_sample_info[-40,]

paired_key <- sample_info[,5:9]
paired_key <- paired_key %>% filter(!is.na(Replicate))

#+END_SRC

Need to use POS_sample_info from lipidomics_preprocessing as the key
* Treated vs. Untreated
** LMME Analysis
#+BEGIN_SRC R :session "global" :results output :exports both
load("~/Desktop/Liposarcoma project/final_figures/final_figures_org_file/figure3.Rda")
cell<-c(names(mdm2hi),names(mdm2lo))
status<-c(rep("Hi",times=length(mdm2hi)),rep("Lo",times=length(mdm2lo)))
library(lme4)

mdm2HiLoLMME<-apply(metabFiltered,1, function(x){
    df<-data.frame(y=x[1:26],cell,status)
    colnames(df)[1]="y"
    fit.null<-lmer(y ~ (1|cell), data = df,REML=FALSE)
    fit<-lmer(y ~ status + (1|cell), data = df,REML=FALSE)
    anovaFit<-anova(fit.null,fit)
    return(anovaFit$'Pr(>Chisq)'[2])
})

#mdm2HiLoLMMEAdj<-p.adjust(mdm2HiLoLMME,method="fdr")
hist(mdm2HiLoLMME,breaks=100)

resMDM2HiLoLMME<-data.frame(resMDM2HiLo,mdm2HiLoLMME)
resMDM2HiLoLMME<-resMDM2HiLoLMME[order(resMDM2HiLoLMME$mypadj),]
colnames(resMDM2HiLoLMME)[5]<-"LMME"
#+END_SRC
** Volcano Plotter
#+BEGIN_SRC R :session "global" :results output :exports both

lipidClassKey<-read.csv("~/Desktop/Liposarcoma project/final_figures/lipidClassKey.csv")

gg_color_hue <- function(n) {
    hues = seq(15, 375, length = n + 1)
    hcl(h = hues, l = 65, c = 100)[1:n]
}

lipidClassKey$color<-gg_color_hue(nrow(lipidClassKey))

mydiff <- function(df,gp1,gp2) {
    myp=as.numeric(apply(df,1,function(x) {
          temp<-x[!is.na(x)]
              gp1<-setdiff(gp1,colnames(df)[is.na(x)])
              gp2<-setdiff(gp2,colnames(df)[is.na(x)])
              if(sd(temp[c(gp1,gp2)])==0) {NA}
              if(sd(temp)==0){NA}
                  else {
                      obj <- try(t.test(temp[gp1],temp[gp2]), silent=TRUE)
                              if (is(obj, "try-error")) return(NA) else return(obj$p.value)
                  }
      }))
      myp.adjust=p.adjust(myp,method='fdr')
      log2fc=as.numeric(apply(df,1,function(x) {
          temp<-x[!is.na(x)]
            gp1<-setdiff(gp1,colnames(df)[is.na(x)])
            gp2<-setdiff(gp2,colnames(df)[is.na(x)])
            mean(temp[gp1])-mean(temp[gp2])
      }
      ))
      return(data.frame(name=rownames(df),myp=myp,mypadj=myp.adjust,log2fc=log2fc))
}

filterMyDiff<-function(x){
    keepers=intersect(which(x$mypadj<0.05),c(which(x$log2fc>1),which(x$log2fc< -1)))
    return(x[keepers,])
}
library(readxl)
lipidomic_key<-read_xlsx("~/Desktop/Liposarcoma project/Lipidomics_key.xlsx",sheet=1)
library(RColorBrewer)

volcano_plotter <- function(df,gp1,gp2,title){
    T_test_results<-mydiff(df,gp1,gp2)
      # Make insignificant points smaller and more transparent
    T_test_results$significant = abs(T_test_results$log2fc) > 1 & -log10(T_test_results$mypadj) > -log10(0.05)
       #T_test_results$alpha <- ifelse(T_test_results$significant,0.05,0.025)
    T_test_results$size <- ifelse(T_test_results$significant,4,2)

      # Color code by lipid class
    T_test_results$MainClass<-lipidomic_key$`LM Main Class`[match(T_test_results$name,lipidomic_key$name)]
    palette_names<-sort(unique(T_test_results$MainClass))
    #T_test_results$MainClass<-sapply(1:nrow(T_test_results),function(x){
    T_test_results$MainClass<-sapply(1:nrow(T_test_results),function(x){
        ifelse(T_test_results$significant[x],
           return(T_test_results$MainClass[x]),return("Not Significant"))
    })

    legend_labels<-sort(unique(sapply(T_test_results$MainClass, function(x){
        if(!is.na(x)){
            return(paste0(x," (n=",length(which(T_test_results$MainClass==x)),")"))
        }else{
            return(x)
        }
    })))

    #legend_labels<-legend_labels[-which(is.na(legend_labels))]

    palette<-c(brewer.pal(12,"Paired"),"#40E0D0","violet","grey80")
      #palette <- c("#FF7F00","#4DAF4A","#377EB8","#E41A1C")
    names(palette)<-c(palette_names,"Not Significant")
    palette<-palette[unique(T_test_results$MainClass)]
    #palette<-palette[-which(is.na(palette))]

    if(any(T_test_results$significant)){
        g = ggplot(data=T_test_results, aes(x=log2fc, y=-log10(mypadj), colour=MainClass)) +
            geom_point(alpha=0.7,aes(size=size, text=name)) +
            scale_color_manual(values = palette,
                               #na.value="grey80",
                               labels=legend_labels,
                               name="LipidMaps Main Class") +
            theme_bw() +
            #scale_color_brewer(palette="Paired",na.value="grey80") +
            ggtitle(title) +
            theme(plot.title = element_text(hjust = 0.5)) +
            theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
            ylab("-log10 p-value") +
            geom_hline(yintercept = -log10(0.05),lty = 2) +
            geom_vline(xintercept = 1, lty = 2) +
            geom_vline(xintercept = -1, lty = 2) +
            scale_size(range=c(2,4)) +
            guides(size=FALSE)
    }else{
        g = ggplot(data=T_test_results, aes(x=log2fc, y=-log10(mypadj))) +
            geom_point(alpha=0.4,aes(text=name)) +
            scale_color_manual(values = palette) +#,na.value="grey80") +
            theme_bw() +
            #scale_color_brewer(palette="Paired",na.value="grey80") +
            ggtitle(title) +
            theme(plot.title = element_text(hjust = 0.5)) +
            theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
            ylab("-log10 p-value") +
            geom_hline(yintercept = -log10(0.05),lty = 2) +
            geom_vline(xintercept = 1, lty = 2) +
            geom_vline(xintercept = -1, lty = 2)
            return(g)
    }

      T_test_results_sig<-T_test_results[T_test_results$significant,]
      text_size<-round(min(20,350/nrow(T_test_results_sig)),digits=0)
      #bpPalette<-as.vector(palette[sort(unique(T_test_results_sig$superClass))])
      barplot<-ggplot(T_test_results_sig, aes(x=reorder(name,log2fc), y=log2fc ))+
          theme_bw() +
          geom_bar(stat="identity",colour="black",aes(fill = MainClass)) +
          scale_fill_manual(values = palette) +
          coord_flip() +
         #ylab("log2(mean(MDM2hi)-mean(MDM2lo))") +
          ylab("log2fc") +
          theme(axis.title.y = element_blank(),axis.title.x = element_text(size=12,face="bold"),axis.text.y=element_text(size=text_size),axis.text.x=element_text(size=10)) +
          theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())

      return(list(g,barplot))
}

#+END_SRC
* DMEM vs STDP

