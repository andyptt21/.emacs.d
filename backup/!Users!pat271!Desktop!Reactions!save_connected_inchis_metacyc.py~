import tqdm
import mmap
from collections import Counter
import csv

"""
Search the MetaCyc reaction file for enzymatic reactions.
Connect substrates and products found in compound file.
"""
def main():
    reactions = get_enzymatic_only("/fs/project/PAS0272/Tara/metabolite_nets/metacyc_ecocyc/22.6/data/reactions.dat")
    inchi = get_inchis(reactions, "/fs/project/PAS0272/Tara/metabolite_nets/metacyc_ecocyc/22.6/data/compounds.dat")
    write_dict_to_tsv("inchi_reactions.tsv", inchi)
    
"""
Retrieve all substrate-product pairs for enzymatic reactions.
"""
def get_enzymatic_only(file):

    #Open the file and set up the output
    right_lines = []
    left_lines = []
    reactions = []
    
    #Read each line until the file is empty.
    tot=get_num_lines(file)
    print("Parsing reaction file...")
    with open(file, 'rU', encoding='windows-1252') as datfile:
        enzymatic = False
        for line in tqdm.tqdm(datfile, total=tot):
        
            #Strip the newline character.
            next_line = line.rstrip('\n')
            
            #Get the set of lines between this and the two slashes.
            if "ENZYMATIC-REACTION - " in next_line:
                enzymatic = True
            #Only add the line if it is in an enzymatic reaction and refers to the substrates.
            elif r"//" not in next_line and enzymatic == True and "LEFT - " in next_line:
                left_lines.append(next_line.split(" - ")[1])
            elif r"//" not in next_line and enzymatic == True and "RIGHT - " in next_line:
                right_lines.append(next_line.split(" - ")[1])
            #If the reaction is finished and there are entries in lines, add all pairs to reactions.
            elif r"//" in next_line:
                enzymatic = False
                for lline in left_lines:
                    for rline in right_lines:
                        #if lline + "," + rline in reactions:
                        #    reactions[lline + "," + rline] = reactions[lline + "," + rline] + 1
                        #else:
                        #    reactions[lline + "," + rline] = 1
                        reactions.append(lline + "," + rline)
                left_lines = []
                right_lines = []
                        
    #Return the final list of reactions.
    datfile.close()
    return reactions
    
"""
Retrieve all substrate-product pairs for enzymatic reactions.
"""
def get_inchis(reactions, file):
    
    #Read in all compounds.
    datfile = open(file, 'rU', encoding='windows-1252')
    compounds = dict()
    names = dict()
    reactions_inchi = dict()
    
    #Read each line until the file is empty.
    current_id = ""
    current_name = ""
    tot=get_num_lines(file)
    print("Retrieving all compounds...")
    with open(file, 'rU', encoding='windows-1252') as datfile:
        for line in tqdm.tqdm(datfile, total=tot):
            #Get the set of lines between this and the two slashes.
            next_line = line.rstrip('\n')
            if "UNIQUE-ID - " in next_line:
                current_id = next_line.split(" - ")[1]
            elif "COMMON-NAME - " in next_line:
                current_name = next_line.split(" - ")[1]
            elif "INCHI - " in next_line and "NON-STANDARD-INCHI" not in next_line:
                compounds[current_id] = next_line.split(" - ")[1]
                names[current_name] = next_line.split(" - ")[1]
            
    #Return the reactions with INCHIs. Only return the reactions
    #for which both compounds are listed.
    print("Counting unique reactions...")
    reaction_counts = dict(Counter(reactions))
    print("Matching INCHIs...")
    for key in tqdm.tqdm(reaction_counts, total=len(reaction_counts)):
        substrate = key.split(",")[0]
        product = key.split(",")[1]
        weight = reaction_counts[key]
        #Compound can match either the common name or the ID.
        if (substrate in compounds.keys()) and (product in compounds.keys()) and substrate != product:
            pair = compounds[substrate] + "\t" + compounds[product]
            reactions_inchi[pair] = weight
        elif (substrate in compounds.keys()) and (product in names.keys()) and substrate != product:
            pair = compounds[substrate] + "\t" + names[product]
            reactions_inchi[pair] = weight
        elif (substrate in names.keys()) and (product in compounds.keys()) and substrate != product:
            pair = names[substrate] + "\t" + compounds[product]
            reactions_inchi[pair] = weight
        elif (substrate in names.keys()) and (product in names.keys()) and substrate != product:
            pair = names[substrate] + "\t" + names[product]
            reactions_inchi[pair] = weight
               
    #Return the reactions formatted as INCHI.
    datfile.close()
    return reactions_inchi
    
"""
Retrieve the number of lines in a file.
"""
def get_num_lines(file_path):
    fp = open(file_path, 'r+', encoding='windows-1252')
    buf = mmap.mmap(fp.fileno(), 0)
    lines = 0
    while buf.readline():
        lines += 1
    fp.close()
    return lines
    
"""
Write a dict to a TSV file.
"""
def write_dict_to_tsv(tsv, dictionary):
    print("Saving file...")
    with open(tsv, 'w') as f:
        w = csv.writer(f, dictionary.keys(), delimiter = "\t")
        w.writerows(dictionary.items())
    
if __name__ == "__main__":
    main() 
    