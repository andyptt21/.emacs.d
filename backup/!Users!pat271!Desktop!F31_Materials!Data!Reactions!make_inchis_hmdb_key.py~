import tqdm
import mmap
from collections import Counter
import csv
import pandas as pd

"""
Build a conversion table of Inchi to common name and HMDB ID
"""
def main():
    table = get_conversion_table("/Users/pat271/Desktop/F31_Materials/Data/Reactions/humancyc/20.5/data/compounds.dat")
    table.to_csv("/Users/pat271/Desktop/F31_Materials/Data/Reactions/inchi_hmdb_table.tsv", sep = "\t")

def get_conversion_table(file):
    
    #Read in all compounds.
    datfile = open(file, 'rU')
    compounds = dict()
    names = dict()
    hmdbs = dict()
    types = dict()
    
    #Read each line until the file is empty.
    current_id = ""
    current_name = ""
    current_hmdb = ""
    current_type = ""
    tot=get_num_lines(file)
    print("Retrieving all compounds...")
    with open(file, 'rU') as datfile:
        for line in tqdm.tqdm(datfile, total=tot):
            #Get the set of lines between this and the two slashes.
            next_line = line.rstrip('\n')
            if "UNIQUE-ID - " in next_line:
                current_id = next_line.split(" - ")[1]
            elif "COMMON-NAME - " in next_line:
                current_name = next_line.split(" - ")[1]
            elif "TYPES - " in next_line:
                current_type = next_line.split(" - ")[1]
            elif "DBLINKS - (HMDB " in next_line:
                current_hmdb = next_line.split(" - ")[1].split("\"")[1]
            elif "INCHI - " in next_line and "NON-STANDARD-INCHI" not in next_line:
                compounds[current_id] = next_line.split(" - ")[1]
                names[current_name] = next_line.split(" - ")[1]
                types[next_line.split(" - ")[1]] = current_type
                hmdbs[current_hmdb] = next_line.split(" - ")[1]
            
    datfile.close()
    hmdbs = {v: k for k, v in hmdbs.iteritems()}
    names = {v: k for k, v in names.iteritems()}
    table = pd.DataFrame({'hmdbs':pd.Series(hmdbs),'names':pd.Series(names),'types':pd.Series(types)})
    return table
    
"""
Retrieve the number of lines in a file.
"""
def get_num_lines(file_path):
    fp = open(file_path, 'r+')
    buf = mmap.mmap(fp.fileno(), 0)
    lines = 0
    while buf.readline():
        lines += 1
    fp.close()
    return lines
    


if __name__ == "__main__":
    main() 
