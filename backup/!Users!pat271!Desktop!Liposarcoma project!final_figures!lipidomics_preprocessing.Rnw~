\documentclass{article}
%\renewenvironment{knitrout}{\begin{minipage}{\columnwidth}}{\end{minipage}}
\usepackage[margin=0.75in]{geometry}
%\usepackage{listings}
%\usepackage[backend=bibtex,sorting=none]{biblatex}
\usepackage{booktabs}
\usepackage{longtable}
\usepackage{array}
\usepackage{multirow}
%\usepackage[table]{xcolor}
\usepackage{wrapfig}
\usepackage{float}
\usepackage{colortbl}
\usepackage{pdflscape}
\usepackage{tabu}
\usepackage{threeparttable}
\usepackage[normalem]{ulem}
\usepackage{lscape}
\newcommand{\blandscape}{\begin{landscape}}
\newcommand{\elandscape}{\end{landscape}}
\title{Lipidomics figures for liposarcoma paper}
\author{Andrew Patt}

\begin{document}

<<setOpts,echo=FALSE>>=
opts_chunk$set(comment=NA,fig.width=12,fig.height=6,tidy=TRUE,fig.keep="all",results="asis",tidy.opts=list(width.cutoff=50),echo=FALSE,message=FALSE,warning=FALSE)
@

\maketitle

This document is being made since I have concerns about normalization,
samples being merged across modes properly, and if the sequence of
analyses was done properly. Hopefully the results I obtain from this
analysis will be identical to the previous results.

The correct order of analyses should be:
\begin{enumerate}
  \item Normalize
  \item Log transform
  \item Statistics
\end{enumerate}

<<removeDuplicates,eval=TRUE,echo=FALSE>>=
source("~/Desktop/LipidMatch/2018_6_2_remove_duplicates.R")
@

<<multiplot,eval=TRUE,echo=FALSE>>=

multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  library(grid)
  plots <- c(list(...), plotlist)
  numPlots = length(plots)
  if (is.null(layout)) {
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                    ncol = cols, nrow = ceiling(numPlots/cols))
  }
 if (numPlots==1) {
    print(plots[[1]])
  } else {
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
    for (i in 1:numPlots) {
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}

@


<<OrganizeSampleInfo>>=
setwd("~/Desktop/Liposarcoma project/Lipidyzer/")
sample_IDs<-read.csv("~/Desktop/Liposarcoma project/Lipidyzer/Sample_IDs.csv")
sample_info<-read.csv("Cell_Run_Order.csv")

mdm2lo_groups=c("863","815")
mdm2hi_groups=c("224","224A","224B","246","141")

MDM2_status<-sapply(sample_info$CellLine, function(x) if (x %in% mdm2lo_groups){return("Low")} else if (x %in% mdm2hi_groups){return("High")} else return(NA))
MDM2_status<-data.frame(Number=sample_info$Number,MDM2_status)
MDM2_status<-MDM2_status[-which(MDM2_status$Number=="Pool"),]

treatment_status<-data.frame(Number=sample_info$Number,sample_info$Treatment)
treatment_status<-treatment_status[-which(treatment_status$Number=="Pool"),]

NEG_Numbers<-c()
for(i in 1:85){
  NEG_Numbers<-c(NEG_Numbers,strsplit(strsplit(as.character(sample_IDs$NEGATIVE[i]),"_")[[1]][2],"-")[[1]][1])
}

NEG_Cell_Lines<-c()
for(i in 1:85){
  NEG_Cell_Lines<-c(NEG_Cell_Lines,strsplit(as.character(sample_IDs$NEGATIVE[i]),"-")[[1]][2])
}

NEG_MDM2_Status<-c()
for(i in NEG_Cell_Lines){
  index<-match(i,sample_info$Number)
  NEG_MDM2_Status<-c(NEG_MDM2_Status,as.character(sample_info$CellLine[index]))
}

NEG_MDM2_Status<-sapply(NEG_MDM2_Status, function(x) if (x %in% mdm2lo_groups){return("Low")} else if (x %in% mdm2hi_groups){return("High")} else return(NA))

NEG_Treatment_Status<-c()
for(i in NEG_Cell_Lines){
  index<-match(i,sample_info$Number)
  NEG_Treatment_Status<-c(NEG_Treatment_Status,as.character(sample_info$Treatment[index]))
}

NEG_medium<-c()
for(i in NEG_Cell_Lines){
  index<-match(i,sample_info$Number)
  NEG_medium<-c(NEG_medium,as.character(sample_info$Media[index]))
}

NEG_sample_info<-data.frame(Run_Order=NEG_Numbers,Number=NEG_Cell_Lines,MDM2_status=NEG_MDM2_Status,Treatment_Status=NEG_Treatment_Status, Medium = NEG_medium)
NEG_sample_info<-rbind(data.frame(Run_Order=01,Number="BLANK 1",MDM2_status=NA,Treatment_Status=NA,Medium=NA),NEG_sample_info)

POS_Numbers<-c()
for(i in 1:82){
  POS_Numbers<-c(POS_Numbers,strsplit(strsplit(as.character(sample_IDs$POSITIVE[i]),"_")[[1]][2],"-")[[1]][1])
}

POS_Cell_Lines<-c()
for(i in 1:82){
  POS_Cell_Lines<-c(POS_Cell_Lines,strsplit(as.character(sample_IDs$POSITIVE[i]),"-")[[1]][2])
}

POS_MDM2_Status<-c()
for(i in POS_Cell_Lines){
  index<-match(i,sample_info$Number)
  POS_MDM2_Status<-c(POS_MDM2_Status,as.character(sample_info$CellLine[index]))
}

POS_MDM2_Status<-sapply(POS_MDM2_Status, function(x) if (x %in% mdm2lo_groups){return("Low")} else if (x %in% mdm2hi_groups){return("High")} else return(NA))

POS_Treatment_Status<-c()
for(i in POS_Cell_Lines){
  index<-match(i,sample_info$Number)
  POS_Treatment_Status<-c(POS_Treatment_Status,as.character(sample_info$Treatment[index]))
}

POS_medium<-c()
for(i in POS_Cell_Lines){
  index<-match(i,sample_info$Number)
  POS_medium<-c(POS_medium,as.character(sample_info$Media[index]))
}

POS_sample_info<-data.frame(Run_Order=POS_Numbers,Number=POS_Cell_Lines,MDM2_status=POS_MDM2_Status,Treatment_Status=POS_Treatment_Status, Medium=POS_medium)

POS_sample_info<-POS_sample_info[-52,]
POS_sample_info<-POS_sample_info[-40,]

# Make lists of which samples go where and use intersections for easy plotting!
MDM2Hi_samples<-as.vector(POS_sample_info$Run_Order)[which(POS_sample_info$MDM2_status=="High")]
MDM2Lo_samples<-as.vector(POS_sample_info$Run_Order)[which(POS_sample_info$MDM2_status=="Low")]

Treated_samples<-as.vector(POS_sample_info$Run_Order)[which(POS_sample_info$Treatment_Status=="Atorvastatin")]
Untreated_samples<-as.vector(POS_sample_info$Run_Order)[which(POS_sample_info$Treatment_Status=="none")]

STDP_samples<-as.vector(POS_sample_info$Run_Order)[which(POS_sample_info$Medium=="STDP")]
DMEM_samples<-as.vector(POS_sample_info$Run_Order)[which(POS_sample_info$Medium=="DMEM")]

@

\subsection{Raw data}
<<RawData>>=

POS_data<-read.csv("~/Desktop/Liposarcoma project/Lipidyzer/LipidMatch_output/MSDIAL_ID_Appended_POS_truncated.csv")
NEG_data<-read.csv("~/Desktop/Liposarcoma project/Lipidyzer/LipidMatch_output/MSDIAL_ID_Appended_NEG_truncated.csv")

colnames(NEG_data)[11:ncol(NEG_data)]<-sapply(colnames(NEG_data)[11:ncol(NEG_data)], function(x) return(strsplit(x,"\\.")[[1]][2]))
colnames(POS_data)[11:ncol(POS_data)]<-sapply(colnames(POS_data)[11:ncol(POS_data)], function(x) return(strsplit(x,"\\.")[[1]][2]))

colnames(NEG_data)[11:ncol(NEG_data)]<-paste0(colnames(NEG_data)[11:ncol(NEG_data)]," Peak area")
colnames(POS_data)[11:ncol(POS_data)]<-paste0(colnames(POS_data)[11:ncol(POS_data)]," Peak area")

#colnames(NEG_data)[11:ncol(NEG_data)]<-gsub("LIPNEG17MAR_","",colnames(NEG_data)[11:ncol(NEG_data)])
#colnames(POS_data)[11:ncol(POS_data)]<-gsub("LIPPOS17MAR_","",colnames(POS_data)[11:ncol(POS_data)])

# Remove Blanks and Pools
POS_data<-POS_data[!grepl("POOL",colnames(POS_data))]
POS_data<-POS_data[!grepl("BLANK",colnames(POS_data))]
NEG_data<-NEG_data[!grepl("POOL",colnames(NEG_data))]
NEG_data<-NEG_data[!grepl("BLANK",colnames(NEG_data))]

par(mfrow=c(1,2))
boxplot(POS_data[,11:ncol(POS_data)],main="Raw Data, POS mode")
boxplot(NEG_data[,11:ncol(NEG_data)],main="Raw Data, NEG mode")
par(mfrow=c(1,1))

@

\subsection{Normalize}

<<Normalize>>=

## Normalize
POS_median<-median(apply(POS_data[,11:ncol(POS_data)],2,sum))
NEG_median<-median(apply(NEG_data[,11:ncol(NEG_data)],2,sum))

TICnormalize<-function(x,mode) {
    if(mode=="POS"){
        TICmedian<-POS_median
    } else if(mode=="NEG"){
        TICmedian<-NEG_median
    }
    (x/sum(x))*TICmedian
    #(x/sum(x))*median(x)
}

factors<-function(x,mode) {
    if(mode=="POS"){
        TICmedian<-POS_median
    } else if(mode=="NEG"){
        TICmedian<-NEG_median
    }
    (1/sum(x))*TICmedian
    #(x/sum(x))*median(x)
}

POS_data[,11:ncol(POS_data)]<-apply(POS_data[,11:ncol(POS_data)],2,TICnormalize, mode="POS")
NEG_data[,11:ncol(NEG_data)]<-apply(NEG_data[,11:ncol(NEG_data)],2,TICnormalize, mode="NEG")

par(mfrow=c(1,2))
boxplot(POS_data[,11:ncol(POS_data)],main="Normalized Data, POS mode")
boxplot(NEG_data[,11:ncol(NEG_data)],main="Normalized Data, NEG mode")
par(mfrow=c(1,1))

plot(apply(POS_data[,11:ncol(POS_data)],2,sum),main="Sum intensity, POS mode")
@

\subsection{Log Transform}
<<LogTransform>>=
## Log transform
POS_data[,11:ncol(POS_data)]<-POS_data[,11:ncol(POS_data)]+0.001
NEG_data[,11:ncol(NEG_data)]<-NEG_data[,11:ncol(NEG_data)]+0.001

POS_data[,11:ncol(POS_data)]<-log(POS_data[,11:ncol(POS_data)],base=2)
NEG_data[,11:ncol(NEG_data)]<-log(NEG_data[,11:ncol(NEG_data)],base=2)

par(mfrow=c(1,2))
boxplot(POS_data[,11:ncol(POS_data)],main="Log Transform/Normalized Data, POS mode")
boxplot(NEG_data[,11:ncol(NEG_data)],main="Log Transform/Normalized Data, NEG mode")
par(mfrow=c(1,1))

@

\subsection{Merge Modes}

<<mergeAndDeduplicate,echo=FALSE,warning=FALSE,message=FALSE>>=

invisible(capture.output(data_merged<-merge_modes(POS_data,NEG_data)))
data_merged<-remove_duplicates(data_merged,1,9,5,0.1)

#boxplot(data_merged[,11:(ncol(data_merged)-2)])

library(reshape)
library(ggplot2)

LM_melted<-melt(data_merged[,11:(ncol(data_merged)-2)])

ggplot(LM_melted, aes(x=variable,y=value)) +
    geom_boxplot() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1))

LM_area<-data_merged[,11:(ncol(data_merged)-2)]
rownames(LM_area)<-data_merged[,ncol(data_merged)-1]

colnames(LM_area)<-POS_sample_info$Run_Order[match(gsub("\\D", "", colnames(LM_area)),POS_sample_info$Number)]

@

\newpage
\blandscape

\section{Statistics}


<<setOpts2,echo=FALSE>>=
opts_chunk$set(fig.height=14,fig.width=18)
@


<<statistics>>=

groupMDM2Hi_Untreated_STDP<-intersect(MDM2Hi_samples,intersect(Untreated_samples,STDP_samples))
groupMDM2Hi_Untreated_DMEM<-intersect(MDM2Hi_samples,intersect(Untreated_samples,DMEM_samples))
groupMDM2Lo_Untreated_STDP<-intersect(MDM2Lo_samples,intersect(Untreated_samples,STDP_samples))
groupMDM2Lo_Untreated_DMEM<-intersect(MDM2Lo_samples,intersect(Untreated_samples,DMEM_samples))

groupMDM2Hi_Treated_STDP<-intersect(MDM2Hi_samples,intersect(Treated_samples,STDP_samples))
groupMDM2Hi_Treated_DMEM<-intersect(MDM2Hi_samples,intersect(Treated_samples,DMEM_samples))
groupMDM2Lo_Treated_STDP<-intersect(MDM2Lo_samples,intersect(Treated_samples,STDP_samples))
groupMDM2Lo_Treated_DMEM<-intersect(MDM2Lo_samples,intersect(Treated_samples,DMEM_samples))

lipidClassKey<-read.csv("~/Desktop/Liposarcoma project/final_figures/lipidClassKey.csv")

gg_color_hue <- function(n) {
    hues = seq(15, 375, length = n + 1)
    hcl(h = hues, l = 65, c = 100)[1:n]
}

lipidClassKey$color<-gg_color_hue(nrow(lipidClassKey))

mydiff <- function(df,gp1,gp2) {
    myp=as.numeric(apply(df,1,function(x) {
          temp<-x[!is.na(x)]
              gp1<-setdiff(gp1,colnames(df)[is.na(x)])
              gp2<-setdiff(gp2,colnames(df)[is.na(x)])
              if(sd(temp[c(gp1,gp2)])==0) {NA}
              if(sd(temp)==0){NA}
                  else {
                      obj <- try(t.test(temp[gp1],temp[gp2]), silent=TRUE)
                              if (is(obj, "try-error")) return(NA) else return(obj$p.value)
                  }
      }))
      myp.adjust=p.adjust(myp,method='fdr')
      log2fc=as.numeric(apply(df,1,function(x) {
          temp<-x[!is.na(x)]
            gp1<-setdiff(gp1,colnames(df)[is.na(x)])
            gp2<-setdiff(gp2,colnames(df)[is.na(x)])
            mean(temp[gp1])-mean(temp[gp2])
      }
      ))
      return(data.frame(name=rownames(df),myp=myp,mypadj=myp.adjust,log2fc=log2fc))
}

filterMyDiff<-function(x){
    keepers=intersect(which(x$mypadj<0.1),c(which(x$log2fc>1),which(x$log2fc< -1)))
    return(x[keepers,])
}
library(readxl)
lipidomic_key<-read_xlsx("~/Desktop/Liposarcoma project/Lipidomics_key.xlsx",sheet=1)
library(RColorBrewer)

volcano_plotter <- function(df,gp1,gp2,title){
    T_test_results<-mydiff(df,gp1,gp2)
      # Make insignificant points smaller and more transparent
    T_test_results$significant = abs(T_test_results$log2fc) > 1 & -log10(T_test_results$mypadj) > -log10(0.1)
       #T_test_results$alpha <- ifelse(T_test_results$significant,0.05,0.025)
    T_test_results$size <- ifelse(T_test_results$significant,4,2)

      # Color code by lipid class
    T_test_results$MainClass<-lipidomic_key$`LM Main Class`[match(T_test_results$name,lipidomic_key$name)]
    palette_names<-sort(unique(T_test_results$MainClass))
    #T_test_results$MainClass<-sapply(1:nrow(T_test_results),function(x){
    T_test_results$MainClass<-sapply(1:nrow(T_test_results),function(x){
        ifelse(T_test_results$significant[x],
           return(T_test_results$MainClass[x]),return("Not Significant"))
    })

    legend_labels<-sort(unique(sapply(T_test_results$MainClass, function(x){
        if(!is.na(x)){
            return(paste0(x," (n=",length(which(T_test_results$MainClass==x)),")"))
        }else{
            return(x)
        }
    })))

    #legend_labels<-legend_labels[-which(is.na(legend_labels))]

    palette<-c(brewer.pal(12,"Paired"),"#40E0D0","violet","grey80")
      #palette <- c("#FF7F00","#4DAF4A","#377EB8","#E41A1C")
    names(palette)<-c(palette_names,"Not Significant")
    palette<-palette[unique(T_test_results$MainClass)]
    #palette<-palette[-which(is.na(palette))]

    if(any(T_test_results$significant)){
        g = ggplot(data=T_test_results, aes(x=log2fc, y=-log10(mypadj), colour=MainClass)) +
            geom_point(alpha=0.7,aes(size=size, text=name)) +
            scale_color_manual(values = palette,
                               #na.value="grey80",
                               labels=legend_labels,
                               name="LipidMaps Main Class") +
            theme_bw() +
            #scale_color_brewer(palette="Paired",na.value="grey80") +
            ggtitle(title) +
            theme(plot.title = element_text(hjust = 0.5)) +
            theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
            ylab("-log10 p-value") +
            geom_hline(yintercept = -log10(0.1),lty = 2) +
            geom_vline(xintercept = 1, lty = 2) +
            geom_vline(xintercept = -1, lty = 2) +
            scale_size(range=c(2,4)) +
            guides(size=FALSE)
    }else{
        g = ggplot(data=T_test_results, aes(x=log2fc, y=-log10(mypadj))) +
            geom_point(alpha=0.4,aes(text=name)) +
            scale_color_manual(values = palette) +#,na.value="grey80") +
            theme_bw() +
            #scale_color_brewer(palette="Paired",na.value="grey80") +
            ggtitle(title) +
            theme(plot.title = element_text(hjust = 0.5)) +
            theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
            ylab("-log10 p-value") +
            geom_hline(yintercept = -log10(0.1),lty = 2) +
            geom_vline(xintercept = 1, lty = 2) +
            geom_vline(xintercept = -1, lty = 2)
            return(g)
    }

      T_test_results_sig<-T_test_results[T_test_results$significant,]
      text_size<-round(min(20,350/nrow(T_test_results_sig)),digits=0)
      #bpPalette<-as.vector(palette[sort(unique(T_test_results_sig$superClass))])
      barplot<-ggplot(T_test_results_sig, aes(x=reorder(name,log2fc), y=log2fc ))+
          theme_bw() +
          geom_bar(stat="identity",colour="black",aes(fill = MainClass)) +
          scale_fill_manual(values = palette) +
          coord_flip() +
         #ylab("log2(mean(MDM2hi)-mean(MDM2lo))") +
          ylab("log2fc") +
          theme(axis.title.y = element_blank(),axis.title.x = element_text(size=12,face="bold"),axis.text.y=element_text(size=text_size),axis.text.x=element_text(size=10)) +
          theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())

      return(list(g,barplot))
}
@

<<volcanoPlots>>=

plot_list<-list(
    volcano_plotter(LM_area,
                    groupMDM2Hi_Untreated_DMEM,
                    groupMDM2Lo_Untreated_DMEM,
                    "MDM2 High vs Low, Untreated, DMEM")[[1]]+xlab("log2(mean(MDM2Hi))-log2(mean(MDM2Lo))"),
    volcano_plotter(LM_area,
                    groupMDM2Hi_Untreated_STDP,
                    groupMDM2Lo_Untreated_STDP,
                    "MDM2Hi vs MDM2lo, Untreated, STDP")[[1]]+xlab("log2(mean(MDM2Hi))-log2(mean(MDM2Lo))"),
    volcano_plotter(LM_area,
                    groupMDM2Hi_Treated_DMEM,
                    groupMDM2Lo_Untreated_DMEM,
                    "MDM2Hi vs MDM2lo, Treated, DMEM")[[1]]+xlab("log2(mean(MDM2Hi))-log2(mean(MDM2Lo))"),
    volcano_plotter(LM_area,
                    groupMDM2Hi_Treated_STDP,
                    groupMDM2Lo_Treated_STDP,
                    "MDM2Hi vs MDM2lo, Treated, STDP")[[1]]+xlab("log2(mean(MDM2Hi))-log2(mean(MDM2Lo))"),
    volcano_plotter(LM_area,
                    groupMDM2Hi_Treated_DMEM,
                    groupMDM2Hi_Untreated_DMEM,
                    "Treated vs Untreated, MDM2Hi, DMEM")+xlab("log2(mean(Treated))-log2(mean(Untreated))"),
    volcano_plotter(LM_area,
                    groupMDM2Lo_Treated_DMEM,
                    groupMDM2Lo_Untreated_DMEM,
                    "Treated vs Untreated, MDM2Lo, DMEM")[[1]]+xlab("log2(mean(Treated))-log2(mean(Untreated))"),
    volcano_plotter(LM_area,
                    groupMDM2Hi_Treated_STDP,
                    groupMDM2Hi_Untreated_STDP,
                    "Treated vs Untreated, MDM2Hi, STDP")+xlab("log2(mean(Treated))-log2(mean(Untreated))"),
    volcano_plotter(LM_area,
                    groupMDM2Lo_Treated_STDP,
                    groupMDM2Lo_Untreated_STDP,
                    "Treated vs Untreated, MDM2Lo, STDP")[[1]]+xlab("log2(mean(Treated))-log2(mean(Untreated))"),
    volcano_plotter(LM_area,
                    groupMDM2Hi_Untreated_STDP,
                    groupMDM2Hi_Untreated_DMEM,
                    "STDP vs DMEM, MDM2Hi, Untreated")[[1]]+xlab("log2(mean(STDP))-log2(mean(DMEM))"),
    volcano_plotter(LM_area,
                    groupMDM2Lo_Untreated_STDP,
                    groupMDM2Lo_Untreated_DMEM,
                    "STDP vs DMEM, MDM2Lo, Untreated")[[1]]+xlab("log2(mean(STDP))-log2(mean(DMEM))"),
    volcano_plotter(LM_area,
                    groupMDM2Hi_Treated_STDP,
                    groupMDM2Hi_Treated_DMEM,
                    "STDP vs DMEM, MDM2Hi, Treated")[[1]]+xlab("log2(mean(STDP))-log2(mean(DMEM))"),
    volcano_plotter(LM_area,
                    groupMDM2Lo_Treated_STDP,
                    groupMDM2Lo_Treated_DMEM,
                    "STDP vs DMEM, MDM2Lo, Treated")[[1]]+xlab("log2(mean(STDP))-log2(mean(DMEM))")
)

multiplot(plotlist=plot_list[c(1,3,2,4)],cols=2)
multiplot(plotlist=plot_list[c(6,5,8,7)],cols=2)
multiplot(plotlist=plot_list[c(10,9,12,11)],cols=2)
@

\elandscape
\newpage

<<setOpts3,echo=FALSE>>=
opts_chunk$set(fig.height=18,fig.width=14)
@
\section{Detailed Volcano Plots}
<<detailVPs>>=
###########################
# Hi vs Lo, Untreated DMEM
###########################

summary<-mydiff(LM_area,
groupMDM2Hi_Untreated_DMEM,
groupMDM2Lo_Untreated_DMEM)

# Color code by lipid class
lipid_list<-summary$name
lipid_classes<-sapply(lipid_list, function(x) gsub("\\s*\\([^\\)]+\\)","",as.character(x)))
lipid_classes<-sapply(lipid_classes, function(x) gsub(")","",as.character(x)))
lipid_classes<-sapply(lipid_classes, function(x) gsub("_16:1","",as.character(x)))
summary$superClass<-lipidClassKey$Class[match(lipid_classes,lipidClassKey$Abbreviation)]
#lipid_classes<-as.vector(lipidClassKey$Subclass[match(lipid_classes,lipidClassKey$Abbreviation)])
lipid_classes<-sapply(1:nrow(summary),function(x){
    ifelse(summary$significant[x],return(lipid_classes[x]),return(NA))
})
#summary$class<-as.factor(lipid_classes)

summary$significant = abs(summary$log2fc) > 1 & -log10(summary$mypadj) > -log10(0.1)
library(dplyr)
library(tibble)
summary<-as.tibble(summary)
#summary<-select(summary,significant,superClass)
#save(summary,file="LipidMDM2HiLoSummary.Rdata")

multiplot(plotlist=volcano_plotter(LM_area,
groupMDM2Hi_Untreated_DMEM,
groupMDM2Lo_Untreated_DMEM,
"MDM2 High vs Low, DMEM, Untreated"),cols=1)

@

<<restOfTheDoc>>=
HIvsLO_untreated_DMEM<-mydiff(LM_area,groupMDM2Hi_Untreated_DMEM,groupMDM2Lo_Untreated_DMEM)
significant_HIvsLO_untreated_DMEM<-filterMyDiff(HIvsLO_untreated_DMEM)
insignificant_HivsLo_untreated_DMEM<-HIvsLO_untreated_DMEM[union(which(HIvsLO_untreated_DMEM$mypadj>0.1),intersect(which(HIvsLO_untreated_DMEM$log2fc<1),which(HIvsLO_untreated_DMEM$log2fc> -1))),]
write.csv(insignificant_HivsLo_untreated_DMEM,"~/Desktop/Liposarcoma project/Lipidomics_tests_11_1/HIvsLO_untreated_DMEM_insignificant.csv")
write.csv(significant_HIvsLO_untreated_DMEM,"~/Desktop/Liposarcoma project/Lipidomics_tests_11_1/HIvsLO_untreated_DMEM.csv")

###########################
# Treated vs Untreated, MDM2Hi, DMEM
###########################
#png("~/Desktop/Liposarcoma project/final_figures/highQualityPNGs/LipidMDM2HiTreatedvsUntreated.png",width=6,height=4,units="in",res=300)

volcano_plotter(LM_area,
                groupMDM2Hi_Treated_DMEM,
                groupMDM2Hi_Untreated_DMEM,
                "MDM2Hi, Treated vs Untreated")+xlab("log2(mean(Treated))-log2(mean(Untreated))")
#dev.off()

TreVsUnt_Hi_DMEM<-mydiff(LM_area,
                groupMDM2Hi_Treated_DMEM,
                groupMDM2Hi_Untreated_DMEM)
significant_TreVsUnt_Hi_DMEM<-filterMyDiff(TreVsUnt_Hi_DMEM)

###########################
# Treated vs Untreated, MDM2Lo, DMEM
###########################
#png("~/Desktop/Liposarcoma project/final_figures/highQualityPNGs/LipidMDM2LoTreatedvsUntreated.png",width=6,height=4,units="in",res=300)
multiplot(plotlist=volcano_plotter(LM_area,
                groupMDM2Lo_Treated_DMEM,
                groupMDM2Lo_Untreated_DMEM,
                "MDM2Lo, Treated vs Untreated"),cols=1)
#dev.off()

TreVsUnt_Lo_DMEM<-mydiff(LM_area,
                groupMDM2Lo_Treated_DMEM,
                groupMDM2Lo_Untreated_DMEM)
significant_TreVsUnt_Lo_DMEM<-filterMyDiff(TreVsUnt_Lo_DMEM)


###########################
# Hi vs Lo, Untreated STDP
###########################
multiplot(plotlist=volcano_plotter(LM_area,
groupMDM2Hi_Untreated_STDP,
groupMDM2Lo_Untreated_STDP,
"MDM2Hi vs MDM2lo, Untreated, STDP"),cols=1)

HIvsLO_untreated_STDP<-mydiff(LM_area,groupMDM2Hi_Untreated_STDP,groupMDM2Lo_Untreated_STDP)
significant_HIvsLO_untreated_STDP<-filterMyDiff(HIvsLO_untreated_STDP)

###########################
# Hi vs Lo, Treated DMEM
###########################
multiplot(plotlist=volcano_plotter(LM_area,
                                groupMDM2Hi_Treated_DMEM,
                                groupMDM2Lo_Untreated_DMEM,
                                "MDM2Hi vs MDM2lo, Treated, DMEM"),cols=1)

HIvsLO_treated_DMEM<-mydiff(LM_area,groupMDM2Hi_Treated_DMEM,groupMDM2Lo_Treated_DMEM)
significant_HIvsLO_treated_DMEM<-filterMyDiff(HIvsLO_treated_DMEM)

###########################
# Hi vs Lo, Treated STDP
###########################
multiplot(plotlist=volcano_plotter(LM_area,
                                groupMDM2Hi_Treated_STDP,
                                groupMDM2Lo_Treated_STDP,
                                "MDM2Hi vs MDM2lo, Treated, STDP"),cols=1)

HIvsLO_treated_STDP<-mydiff(LM_area,groupMDM2Hi_Treated_STDP,groupMDM2Lo_Treated_STDP)
significant_HIvsLO_treated_STDP<-filterMyDiff(HIvsLO_treated_STDP)

###########################
# Treated vs Untreated, MDM2Hi, STDP
###########################
volcano_plotter(LM_area,
                                groupMDM2Hi_Treated_STDP,
                                groupMDM2Hi_Untreated_STDP,
                                "Treated vs Untreated, MDM2Hi, STDP")
TreVsUnt_MDM2Hi_STDP<-mydiff(LM_area,groupMDM2Hi_Treated_STDP,groupMDM2Lo_Treated_STDP)
significant_TreVsUnt_MDM2Hi_STDP<-filterMyDiff(TreVsUnt_MDM2Hi_STDP)


###########################
# Treated vs Untreated, MDM2Lo, STDP
###########################
multiplot(plotlist=volcano_plotter(LM_area,
                                groupMDM2Lo_Treated_STDP,
                                groupMDM2Lo_Untreated_STDP,
                                "Treated vs Untreated, MDM2Lo, STDP"),cols=1)
TreVsUnt_MDM2Lo_STDP<-mydiff(LM_area,
                                groupMDM2Lo_Treated_STDP,
                                groupMDM2Lo_Untreated_STDP)
significant_TreVsUnt_MDM2Lo_STDP<-filterMyDiff(TreVsUnt_MDM2Lo_STDP)

###########################
# STDP vs DMEM, MDM2Hi, Untreated
###########################
multiplot(plotlist=volcano_plotter(LM_area,
                                groupMDM2Hi_Untreated_STDP,
                                groupMDM2Hi_Untreated_DMEM,
                                "STDP vs DMEM, MDM2Hi, Untreated"),cols=1)

STDPvsDMEM_MDM2Hi_Unt<-mydiff(LM_area,
                                groupMDM2Hi_Untreated_STDP,
                                groupMDM2Hi_Untreated_DMEM)
significant_STDPvsDMEM_MDM2Hi_Unt<-filterMyDiff(STDPvsDMEM_MDM2Hi_Unt)

###########################
# STDP vs DMEM, MDM2Lo, Untreated
###########################
multiplot(plotlist=volcano_plotter(LM_area,
                                groupMDM2Lo_Untreated_STDP,
                                groupMDM2Lo_Untreated_DMEM,
                                "STDP vs DMEM, MDM2Lo, Untreated"),cols=1)
STDPvsDMEM_MDM2Lo_Unt<-mydiff(LM_area,
                                groupMDM2Lo_Untreated_STDP,
                                groupMDM2Lo_Untreated_DMEM)
significant_STDPvsDMEM_MDM2Lo_Unt<-filterMyDiff(STDPvsDMEM_MDM2Lo_Unt)

###########################
# STDP vs DMEM, MDM2Hi, Treated
###########################
multiplot(plotlist=volcano_plotter(LM_area,
                                groupMDM2Hi_Treated_STDP,
                                groupMDM2Hi_Treated_DMEM,
                                "STDP vs DMEM, MDM2Hi, Treated"),cols=1)
STDPvsDMEM_MDM2Hi_Tre<-mydiff(LM_area,
                                groupMDM2Hi_Treated_STDP,
                                groupMDM2Hi_Treated_DMEM)
significant_STDPvsDMEM_MDM2Hi_Tre<-filterMyDiff(STDPvsDMEM_MDM2Hi_Tre)

###########################
# STDP vs DMEM, MDM2Lo, Treated
###########################
multiplot(plotlist=volcano_plotter(LM_area,
                                groupMDM2Lo_Treated_STDP,
                                groupMDM2Lo_Treated_DMEM,
                                "STDP vs DMEM, MDM2Lo, Treated"),cols=1)
STDPvsDMEM_MDM2Lo_Tre<-mydiff(LM_area,
                                groupMDM2Lo_Treated_STDP,
                                groupMDM2Lo_Treated_DMEM)
significant_STDPvsDMEM_MDM2Lo_Tre<-filterMyDiff(STDPvsDMEM_MDM2Lo_Tre)


@

<<makeExcelTable,eval=FALSE>>=
library(WriteXLS)
output <- list(HIvsLO_untreated_DMEM,HIvsLO_treated_DMEM,HIvsLO_untreated_STDP,HIvsLO_treated_STDP,
               TreVsUnt_Hi_DMEM,TreVsUnt_Lo_DMEM,TreVsUnt_MDM2Hi_STDP,TreVsUnt_MDM2Lo_STDP,
               STDPvsDMEM_MDM2Hi_Unt,STDPvsDMEM_MDM2Lo_Unt,STDPvsDMEM_MDM2Hi_Tre,STDPvsDMEM_MDM2Lo_Tre)
names(output) <- c("resMDM2HiLoUntDMEM","resMDM2HiLoTreDMEM","resMDM2HiLoUntSTDP","resMDM2HiLoTreSTDP",
                   "resTreVsUntMDM2HiDMEM","resTreVsUntMDM2LoDMEM","resTreVsUntMDM2HiSTDP","resTreVsUntMDM2LoSTDP",
                   "resSTDPvsDMEMMDM2HiUnt","resSTDPvsDMEMMDM2LoUnt","resSTDPvsDMEMMDM2HiTre","resSTDPvsDMEMMDM2LoTre")
#WriteXLS(output,ExcelFileName = "~/Desktop/Liposarcoma project/final_figures/final_lipidomics_results_081718.xlsx")
@

Lastly, UpSetR to find intersections.

<<setOpts4,echo=FALSE>>=
opts_chunk$set(fig.height=9,fig.width=14)
@


<<UpSetR,fig.keep="high">>=

library(UpSetR)

listInput<-list(upInHigh_Unt_DMEM=significant_HIvsLO_untreated_DMEM$name[which(significant_HIvsLO_untreated_DMEM$log2fc>0)],
                upInLow_Unt_DMEM=significant_HIvsLO_untreated_DMEM$name[which(significant_HIvsLO_untreated_DMEM$log2fc<0)],
                upInHigh_Unt_STDP=significant_HIvsLO_untreated_STDP$name[which(significant_HIvsLO_untreated_STDP$log2fc>0)],
                upInLow_Unt_STDP=significant_HIvsLO_untreated_STDP$name[which(significant_HIvsLO_untreated_STDP$log2fc<0)],
                upInHigh_Tre_DMEM=significant_HIvsLO_treated_DMEM$name[which(significant_HIvsLO_treated_DMEM$log2fc>0)],
                upInLow_Tre_DMEM=significant_HIvsLO_treated_DMEM$name[which(significant_HIvsLO_treated_DMEM$log2fc<0)],
                upInLow_Tre_STDP=significant_HIvsLO_treated_STDP$name,
                upInTre_Lo_STDP=significant_TreVsUnt_MDM2Lo_STDP$name[which(significant_TreVsUnt_MDM2Lo_STDP$log2fc>0)],
                upInUnt_Lo_STDP=significant_TreVsUnt_MDM2Lo_STDP$name[which(significant_TreVsUnt_MDM2Lo_STDP$log2fc<0)],
                upInDMEM_Hi_Unt=significant_STDPvsDMEM_MDM2Hi_Unt$name,
                upInSTDP_Lo_Unt=significant_STDPvsDMEM_MDM2Lo_Unt$name[which(significant_STDPvsDMEM_MDM2Lo_Unt$log2fc>0)],
                upInDMEM_Lo_Unt=significant_STDPvsDMEM_MDM2Lo_Unt$name[which(significant_STDPvsDMEM_MDM2Lo_Unt$log2fc<0)],
                upInSTDP_Hi_Tre=significant_STDPvsDMEM_MDM2Hi_Tre$name[which(significant_STDPvsDMEM_MDM2Hi_Tre$log2fc>0)],
                upInDMEM_Hi_Tre=significant_STDPvsDMEM_MDM2Hi_Tre$name[which(significant_STDPvsDMEM_MDM2Hi_Tre$log2fc<0)],
                upInDMEM_Lo_Tre=significant_STDPvsDMEM_MDM2Lo_Tre$name)

names(listInput)=c("Higher in MDM2-High (Untreated, DMEM)",
                   "Lower in MDM2-High (Untreated, DMEM)",
                   "Higher in MDM2-High (Untreated, STDP)",
                   "Lower in MDM2-High (Untreated, STDP)",
                   "Higher in MDM2-High (Treated, DMEM)",
                   "Lower in MDM2-High (Treated, DMEM)",
                   "Lower in MDM2-High (Treated, STDP)",
                   "Higher in Statin-Treated (MDM2Lo, STDP)",
                   "Lower in Statin-Treated (MDM2Lo, STDP)",
                   "Lower in Sterol-Deprived Media (MDM2Hi, Untreated)",
                   "Higher in Sterol-Deprived Media (MDM2Lo, Untreated)",
                   "Lower in Sterol-Deprived Media (MDM2Lo, Untreated)",
                   "Higher in Sterol-Deprived Media (MDM2Hi, Treated)",
                   "Lower in Sterol-Deprived Media (MDM2Hi, Treated)",
                   "Lower in Sterol-Deprived Media (MDM2Lo, Treated)")

##upset(fromList(listInput), order.by = "freq",nsets=15)
HiLoMeta<-data.frame(sets<-names(listInput)[1:7],direction=c("High","Low","High","Low","High","Low","Low"))
upset(fromList(listInput[1:7]), order.by = "freq",nsets=7, set.metadata = list(data=HiLoMeta,
                                                                               plots=list(list(type="matrix_rows",
                                                                                          column="direction",
                                                                                          colors=c(High="red",
                                                                                                   Low="blue"),
                                                                                          alpha=0.5))))
grid.text("Changes related to MDM2 status",x = 0.65, y=0.95, gp=gpar(fontsize=20))

MediaMeta<-data.frame(sets=names(listInput)[10:15],direction=c("DMEM","STDP","DMEM","STDP","DMEM","DMEM"))
upset(fromList(listInput[10:15]), order.by = "freq",nsets=6, set.metadata = list(data=MediaMeta,
                                                                               plots=list(list(type="matrix_rows",
                                                                                          column="direction",
                                                                                          colors=c(DMEM="green",
                                                                                                   STDP="purple"),
                                                                                          alpha=0.5))))
grid.text("Changes related to Growth Media",x = 0.65, y=0.95, gp=gpar(fontsize=20))

@

\section{Pathway Analysis}

<<pathwayAnalysis, eval = FALSE>>=
library(tidyverse)
library(readxl)
lipidMatch_table<-read_xlsx("~/Desktop/Pathway_Analysis/LipidMatch_KEGGPathways.xlsx")
lipidMatch_table<-drop_na(lipidMatch_table,`Pathway(s)`)


df <- LM_area
gp1 <- groupMDM2Hi_Untreated_DMEM
gp2 <- groupMDM2Lo_Untreated_DMEM

T_test_results<-mydiff(df,gp1,gp2)
T_test_results$significant = abs(T_test_results$log2fc) > 1 & -log10(T_test_results$mypadj) > -log10(0.1)

lipid_classes<-sapply(lipid_list, function(x)
    gsub("\\s*\\([^\\)]+\\)","",as.character(x)))
lipid_classes<-sapply(lipid_classes, function(x)
    gsub(")","",as.character(x)))
lipid_classes<-sapply(lipid_classes, function(x)
    gsub("_16:1","",as.character(x)))
T_test_results$superClass<-lipidClassKey$Class[match(lipid_classes,lipidClassKey$Abbreviation)]
T_test_results$class<-as.factor(lipid_classes)

KEGG_ID <- lipidMatch_table$`KEGG ID`[match(T_test_results$class,lipidMatch_table$Class)]
KEGG_ID<-paste0("kegg:",KEGG_ID)
T_test_results$KEGG_ID <- KEGG_ID

## Pathways <- lipidMatch_table$`Pathway(s)`[match(T_test_results$class,lipidMatch_table$Class)]
## T_test_results$Pathways <- Pathways

## Pathway_list<-lapply(Pathways,function(x) strsplit(gsub("[^[:alnum:] ]", "", x), " +")[[1]])
library(RMySQL)
con <- dbConnect(MySQL(),
         user="root", password="",
         dbname="ramp", host="localhost")
on.exit(dbDisconnect(con))

compound_IDs<-c()
pathway_list<-c()
for(i in KEGG_ID){
    rs <- dbSendQuery(con, paste0("select pathwayRampId from analytehaspathway where rampId = (select rampId from source where sourceId = \'",i,"\');"))
    pathways <- fetch(rs, n=-1)
    huh <- dbHasCompleted(rs)
    dbClearResult(rs)
    ifelse(nrow(pathways)!=0,pathwayName_vector<-as.matrix(pathways),pathwayName_vector<-"No pathway information")
    pathwayName_vector<-paste(pathwayName_vector,collapse="; ")
    pathway_list<-c(pathway_list,pathwayName_vector)
    compound_IDs<-c(compound_IDs,i)
    ## if(nrow(pathways)!=0){
    ##     for(j in as.vector(as.matrix(pathways))){
    ##         rs <- dbSendQuery(con, paste0("select pathwayName from pathway where pathwayRampId =\'",j,"\';"))
    ##         pathwayName <- fetch(rs, n=-1)
    ##         huh <- dbHasCompleted(rs)
    ##         dbClearResult(rs)
    ##         pathwayName_vector<-c(pathwayName_vector,pathwayName)
    ##     }
    ##     pathwayName_vector<-unique(pathwayName_vector)
    ##     pathwayName_vector<-paste(pathwayName_vector,collapse="; ")
    ##     pathway_list<-c(pathway_list,pathwayName_vector)
    ##     compound_IDs<-c(compound_IDs,i)
    ## } else {
    ##     pathwayName_vector<-"No pathway information"
    ##     pathway_list<-c(pathway_list,pathwayName_vector)
    ##     compound_IDs<-c(compound_IDs,i)
    ## }
}

pathway_list<-lapply(pathway_list,function(x) strsplit(x,split="; "))

pathway_composition<-lapply(unique(unlist(pathway_list)), function(x){
    rs <- dbSendQuery(con, paste0("select * from analytehaspathway where pathwayRampId = \'",x,"\';"))
    return(pathways <- fetch(rs, n=-1))
    huh <- dbHasCompleted(rs)
    dbClearResult(rs)
})
pathway_composition[[1]]<-NULL
pathway_composition<-lapply(pathway_composition, function(x){
    compounds<- x %>% filter(grepl("_C_",rampId)) %>% select(rampId)
})

pathway_kegg_composition<-list()
k=1
for(i in pathway_composition){
    kegg_ids<-as.vector(i)
    for(j in 1:nrow(i)){
        id <- dbGetQuery(con, paste0("select * from source where rampId = \'",i[j,],"\' and IDtype = 'kegg';"))
        #print(j)
        if(nrow(id)!=0){
            # Take the first result if there's more then one. This should be looked at
            kegg_ids[[j]]<-id$sourceId[1]
        }
    }
    pathway_kegg_composition[[k]]<-kegg_ids[1,]
    k=k+1
}

names(pathway_kegg_composition)<-unique(unlist(pathway_list))[-1]

save(pathway_kegg_composition,file="data/pathway_kegg_composition.Rda")

load("data/pathway_kegg_composition.Rda")
library(stats)

pathway_analysis_results<-sapply(pathway_kegg_composition,function(x){
    contingency_table<-matrix(nrow=2,ncol=2)
    colnames(contingency_table)<-c("Significant","Not Significant")
    rownames(contingency_table)<-c("In Pathway", "Not in Pathway")
    contingency_table[1,1]<-length(intersect(T_test_results$KEGG_ID[which(T_test_results$significant)],x))
    contingency_table[1,2]<-length(intersect(T_test_results$KEGG_ID[which(!T_test_results$significant)],x))
    contingency_table[2,1]<-length(which(T_test_results$significant))-contingency_table[1,1]
    contingency_table[2,2]<-length(which(!T_test_results$significant))-contingency_table[1,2]
    return(fisher.test(contingency_table)$p.value)
})

@


\end{document}
