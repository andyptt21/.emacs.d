#+DATE: [2019-03-13 Wed]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
#+DESCRIPTION:
#+TITLE: Comparing informative priors with uninformative priors on phenotype prediction
#+AUTHOR: Andrew Patt

In a different take on figure 2, I'll be attempting to show that
informative priors improve predictive capacity in biological
data. These priors would ideally be built from our biological
databases, but for the grant it is also acceptable to show this is the
case with "historical priors".

* Notes on 'deal'
** Made for mixed variables (continuous AND discrete)
** Functions:
*** *Define priors*
*** Estimate parameters
*** Calculate network scores
*** Perform heuristic search
*** Simulate data with a given dependency structure
** Prior must be in the form of a bayesian network
** This prior network is used to deduce the prior distributions for all parameters in a model
** Combined with training data to obtain posterior distributions for parameters
** Continuous nodes have local probability distributions that are Gaussian linear regressions on the continuous parents with parameters depending on the configuration of discrete parents
** For a discrete variable, the suggested local probability distribution is taken to be uniform over the levels for each parent configuration
** Since we'll only have one discrete node, discrete nodes will not have discrete parents, making them uniformly distributed? Seems correct.
** Priors are specified using the /master prior/ procedure
   1. Specify a prior Bayesian network, i.e. a prior DAG and prior
      local probability distributions. Calculate the joint prior
      distribution.
   2. From this joint prior distribution, the marginal distribution of
      all parameters in the family consisting of the node and its
      parents can be determined. We call this the /master prior/.
   3. The local parameter priors are now determined by conditioning in
      the master prior distribution.
* Load packages and data
#+BEGIN_SRC R :session "global" :results output :exports both
library(deal)
load("~/Desktop/Thesis/data/breast.cancer.objects.RData")

## Trim extra metabolomics samples
data.metab<-data.metab[,colnames(data.exprs)]

#+END_SRC

#+RESULTS:

* Get Pathway Metabolites
#+BEGIN_SRC R :session "global" :results output :exports both
library(tidyverse)
library(RMySQL)
con <- dbConnect(MySQL(),
         user="root", password="",
         dbname="ramp", host="localhost")
on.exit(dbDisconnect(con))

glutamate_metabolism<-"RAMP_P_000051316"

rs <- dbSendQuery(con,
                  paste0("select * from analytehaspathway where pathwayRampId = \'",
                         glutamate_metabolism,"\';"))
pathway <- fetch(rs, n=-1)
huh <- dbHasCompleted(rs)
dbClearResult(rs)

compounds <- pathway  %>% select(rampId)

kegg_ids<-c()
for(i in 1:nrow(compounds)){
    id <- dbGetQuery(con, paste0("select * from source where rampId = \'",compounds[i,],"\' and IDtype = 'kegg';"))
    if(nrow(id)!=0){
        kegg_ids<-c(kegg_ids,id$sourceId[1])
    }
}

kegg_ids<-gsub("kegg:","",kegg_ids)
## intersect(kegg_ids,fData.metab$KEGG_ID)

HMDB_ids<-c()
for(i in 1:nrow(compounds)){
    id <- dbGetQuery(con, paste0("select * from source where rampId = \'",compounds[i,],"\' and IDtype = 'hmdb';"))
    if(nrow(id)!=0){
        HMDB_ids<-c(HMDB_ids,id$sourceId[1])
    }
}

HMDB_ids<-gsub("hmdb:","",HMDB_ids)
HMDB_ids<-gsub("HMDB00","HMDB",HMDB_ids)
intersect(HMDB_ids,fData.metab$HMDB_ID)

## Overlap of 13/28 metabolites. This should work.
## Convert gene name to KEGG ID to make sure gene overlap is sufficient.

genes<-compounds[sapply(compounds,grepl,pattern="_G_")]

common_names<-c()
for(i in 1:length(genes)){
    id <- dbGetQuery(con, paste0("select * from source where rampId = \'",genes[i],"\' and IDtype = 'kegg';"))
    if(nrow(id)!=0){
            #kegg_ids[[j]]<-id$sourceId[1]
        common_names<-c(common_names,id$commonName[1])
    }
}

common_names<-sapply(common_names,function(x) return(strsplit(x,";")[[1]][1]))
names(common_names)<-genes

## length(intersect(common_names,fData.exprs$id))/length(common_names)

glutMetabs<-fData.metab$BIOCHEMICAL[match(HMDB_ids,fData.metab$HMDB_ID)]
HMDB_ids<-HMDB_ids[!is.na(glutMetabs)]
AAG_common_names<-as.vector(glutMetabs)[!is.na(glutMetabs)]
glutMetabs<-AAG_common_names
glutMetabs<-data.metab[glutMetabs,]

glutRNA<-data.exprs[common_names,]

missingValues<-apply(glutMetabs,1,function(x){
    return(length(which(x==min(x)))/length(x))
})
qplot(missingValues,geom="histogram") +
    ggtitle("Missing Values by Metabolite")
## 3 metabolites have >50% missing values
glutMetabs<-glutMetabs[which(missingValues<.5),]

boxplot(glutMetabs)
boxplot(glutRNA)

glutMO<-rbind(glutMetabs,glutRNA)

mydiff <- function(df,gp1,gp2) {
    myp=as.numeric(apply(df,1,function(x) {
          temp<-x[!is.na(x)]
              gp1<-setdiff(gp1,colnames(df)[is.na(x)])
              gp2<-setdiff(gp2,colnames(df)[is.na(x)])
              if(sd(temp[c(gp1,gp2)])==0) {NA}
              if(sd(temp)==0){NA}
                  else {
                      obj <- try(t.test(temp[gp1],temp[gp2]), silent=TRUE)
                              if (is(obj, "try-error")) return(NA) else return(obj$p.value)
                  }
      }))
      myp.adjust=p.adjust(myp,method='fdr')
      log2fc=as.numeric(apply(df,1,function(x) {
          temp<-x[!is.na(x)]
            gp1<-setdiff(gp1,colnames(df)[is.na(x)])
            gp2<-setdiff(gp2,colnames(df)[is.na(x)])
            mean(temp[gp1])-mean(temp[gp2])
      }
      ))
      return(data.frame(name=rownames(df),myp=myp,mypadj=myp.adjust,log2fc=log2fc))
}

df<-glutMO
##Tumor
gp1<-48:ncol(glutMO)
##ANT
gp2<-1:47

T_test_results<-mydiff(df,gp1,gp2)
## Make insignificant points smaller and more transparent
T_test_results$significant = abs(T_test_results$log2fc) > 1 & -log10(T_test_results$mypadj) > -log10(0.05)
#T_test_results$alpha <- ifelse(T_test_results$significant,0.05,0.025)
T_test_results$size <- ifelse(T_test_results$significant,4,2)

T_test_results$MainClass<-c(rep("Metabolite",times=nrow(glutMetabs)),rep("Transcript",time=nrow(glutRNA)))
palette_names<-sort(unique(T_test_results$MainClass))

#palette <- c("#FF7F00","#4DAF4A")
#names(palette)<-palette_names

library(ggrepel)

volcano_plot <- ggplot(data=T_test_results, aes(x=log2fc, y=-log10(mypadj), colour=MainClass,
                                    label=ifelse(significant,as.character(name),""))) +
    geom_point(alpha=0.7,aes(size=size, text=name)) +
    scale_color_brewer(palette="Set1") +
    geom_text_repel(show.legend = FALSE,size=3) +
    theme_bw() +
    ##ggtitle("Differences in Glutamate Metabolism Metabolites and Transcripts") +
    theme(plot.title = element_text(hjust = 0.5)) +
    theme(panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          ##axis.title=element_text(size=6,face="bold"),
          legend.title=element_blank()) +
    ylab("-log10 p-value") +
    xlab("log2(Tumor)-log2(ANT)") +
    geom_hline(yintercept = -log10(0.1),lty = 2) +
    geom_vline(xintercept = 1, lty = 2) +
    geom_vline(xintercept = -1, lty = 2) +
    scale_size(range=c(2,4)) +
    guides(size=FALSE,label=FALSE)
volcano_plot

#+END_SRC

#+RESULTS:
#+begin_example
#+end_example

So I've successfully recovered the AAG pathway data, stored in
glutMetabs. We have 108 samples so the next step is to randomize and
build a prior. It appears that the first 47 samples are normal and the
remaining are tumor.
* Build network
#+BEGIN_SRC R :session "global" :results output :exports both
glutMetabs<-as.data.frame(t(glutMetabs))
glutMetabs$phenotype<-as.factor(c(rep(0,47),rep(1,61)))

glutMetabs.nw<-network(glutMetabs)

prior <- jointprior(glutMetabs.nw)

## Ban any effects of metabolites on phenotype

glutMetabs.nw <- learn(glutMetabs.nw,glutMetabs,prior)$nw
result <- heuristic(glutMetabs.nw,glutMetabs,prior,restart=2,degree=10,trace=TRUE,removecycles = TRUE)
thebest <- result$nw
savenet(thebest, file("glutMetabs.net"))

#+END_SRC

#+RESULTS:
#+begin_example

Imaginary sample size: 4

[Heuristic [Autosearch (1) -1670.634 [asparagine|alanine][alanine][aspartate][pyruvate][glutamine][N-acetyl-aspartyl-glutamate (NAAG)][citrate][succinate][fumarate][phenotype]
(2) -1619.258 [asparagine|alanine][alanine|aspartate][aspartate][pyruvate][glutamine][N-acetyl-aspartyl-glutamate (NAAG)][citrate][succinate][fumarate][phenotype]
(3) -1589.619 [asparagine|alanine][alanine|aspartate][aspartate|N-acetyl-aspartyl-glutamate (NAAG)][pyruvate][glutamine][N-acetyl-aspartyl-glutamate (NAAG)][citrate][succinate][fumarate][phenotype]
(4) -1561.277 [asparagine|alanine][alanine|aspartate][aspartate|N-acetyl-aspartyl-glutamate (NAAG)][pyruvate][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|phenotype][citrate][succinate][fumarate][phenotype]
(5) -1535.806 [asparagine|alanine][alanine|aspartate][aspartate|N-acetyl-aspartyl-glutamate (NAAG)][pyruvate][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|phenotype][citrate][succinate][fumarate|aspartate][phenotype]
(6) -1510.399 [asparagine|alanine][alanine|aspartate][aspartate|N-acetyl-aspartyl-glutamate (NAAG)][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|phenotype][citrate][succinate][fumarate|aspartate][phenotype]
(7) -1495.761 [asparagine|alanine][alanine|aspartate][aspartate|N-acetyl-aspartyl-glutamate (NAAG):phenotype][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|phenotype][citrate][succinate][fumarate|aspartate][phenotype]
(8) -1484.241 [asparagine|alanine:aspartate][alanine|aspartate][aspartate|N-acetyl-aspartyl-glutamate (NAAG):phenotype][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|phenotype][citrate][succinate][fumarate|aspartate][phenotype]
(9) -1473.094 [asparagine|alanine:aspartate][alanine|aspartate][aspartate|N-acetyl-aspartyl-glutamate (NAAG):phenotype][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|phenotype][citrate][succinate|aspartate][fumarate|aspartate][phenotype]
(10) -1464.956 [asparagine|alanine:aspartate][alanine|aspartate][aspartate|N-acetyl-aspartyl-glutamate (NAAG):phenotype][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|phenotype][citrate|alanine][succinate|aspartate][fumarate|aspartate][phenotype]
(11) -1457.907 [asparagine|alanine:aspartate][alanine|aspartate][aspartate|N-acetyl-aspartyl-glutamate (NAAG):phenotype][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|phenotype][citrate|alanine][succinate|aspartate:glutamine][fumarate|aspartate][phenotype]
(12) -1453.406 [asparagine|alanine:aspartate][alanine|aspartate][aspartate|N-acetyl-aspartyl-glutamate (NAAG):phenotype][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|phenotype][citrate|alanine][succinate|aspartate:glutamine][fumarate|asparagine:aspartate][phenotype]
(13) -1449.841 [asparagine|alanine:aspartate:phenotype][alanine|aspartate][aspartate|N-acetyl-aspartyl-glutamate (NAAG):phenotype][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|phenotype][citrate|alanine][succinate|aspartate:glutamine][fumarate|asparagine:aspartate][phenotype]
(14) -1446.756 [asparagine|alanine:aspartate:phenotype][alanine|aspartate][aspartate|N-acetyl-aspartyl-glutamate (NAAG):phenotype][pyruvate|asparagine][glutamine|N-acetyl-aspartyl-glutamate (NAAG)][N-acetyl-aspartyl-glutamate (NAAG)|phenotype][citrate|alanine][succinate|aspartate:glutamine][fumarate|asparagine:aspartate][phenotype]
(15) -1442.129 [asparagine|alanine:aspartate:phenotype][alanine|aspartate][aspartate|N-acetyl-aspartyl-glutamate (NAAG):phenotype][pyruvate|asparagine][glutamine|asparagine:N-acetyl-aspartyl-glutamate (NAAG)][N-acetyl-aspartyl-glutamate (NAAG)|phenotype][citrate|alanine][succinate|aspartate:glutamine][fumarate|asparagine:aspartate][phenotype]
(16) -1433.454 [asparagine|alanine:aspartate:phenotype][alanine|aspartate][aspartate|N-acetyl-aspartyl-glutamate (NAAG):phenotype][pyruvate|asparagine][glutamine|asparagine:N-acetyl-aspartyl-glutamate (NAAG):phenotype][N-acetyl-aspartyl-glutamate (NAAG)|phenotype][citrate|alanine][succinate|aspartate:glutamine][fumarate|asparagine:aspartate][phenotype]
(17) -1431.668 [asparagine|alanine:aspartate:phenotype][alanine|aspartate][aspartate|N-acetyl-aspartyl-glutamate (NAAG):phenotype][pyruvate|asparagine][glutamine|asparagine:N-acetyl-aspartyl-glutamate (NAAG):phenotype][N-acetyl-aspartyl-glutamate (NAAG)|phenotype][citrate|alanine][succinate|aspartate:glutamine][fumarate|asparagine:aspartate:citrate][phenotype]
Total 4.769 add 0.861 rem 0.041 turn 0.089 sort 0.011 choose 1.471 rest 2.296 ]
[Perturb 0.018 ]
[Autosearch (1) -1617.947 [asparagine][alanine|asparagine:glutamine][aspartate|alanine][pyruvate][glutamine][N-acetyl-aspartyl-glutamate (NAAG)][citrate|pyruvate][succinate][fumarate][phenotype]
(2) -1588.308 [asparagine][alanine|asparagine:glutamine][aspartate|alanine][pyruvate][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|aspartate][citrate|pyruvate][succinate][fumarate][phenotype]
(3) -1562.837 [asparagine][alanine|asparagine:glutamine][aspartate|alanine][pyruvate][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|aspartate][citrate|pyruvate][succinate][fumarate|aspartate][phenotype]
(4) -1537.431 [asparagine][alanine|asparagine:glutamine][aspartate|alanine][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|aspartate][citrate|pyruvate][succinate][fumarate|aspartate][phenotype]
(5) -1516.972 [asparagine][alanine|asparagine:glutamine:phenotype][aspartate|alanine][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|aspartate][citrate|pyruvate][succinate][fumarate|aspartate][phenotype]
(6) -1503.504 [asparagine][alanine|asparagine:glutamine:phenotype][aspartate|alanine:phenotype][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|aspartate][citrate|pyruvate][succinate][fumarate|aspartate][phenotype]
(7) -1490.12 [asparagine][alanine|asparagine:glutamine:phenotype][aspartate|alanine:phenotype][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:phenotype][citrate|pyruvate][succinate][fumarate|aspartate][phenotype]
(8) -1478.973 [asparagine][alanine|asparagine:glutamine:phenotype][aspartate|alanine:phenotype][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:phenotype][citrate|pyruvate][succinate|aspartate][fumarate|aspartate][phenotype]
(9) -1471.925 [asparagine][alanine|asparagine:glutamine:phenotype][aspartate|alanine:phenotype][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:phenotype][citrate|pyruvate][succinate|aspartate:glutamine][fumarate|aspartate][phenotype]
(10) -1465.567 [asparagine][alanine|asparagine:glutamine:phenotype][aspartate|alanine:phenotype][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:phenotype][citrate|aspartate:pyruvate][succinate|aspartate:glutamine][fumarate|aspartate][phenotype]
(11) -1460.4 [asparagine][alanine|asparagine:glutamine:phenotype][aspartate|asparagine:alanine:phenotype][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:phenotype][citrate|aspartate:pyruvate][succinate|aspartate:glutamine][fumarate|aspartate][phenotype]
(12) -1455.899 [asparagine][alanine|asparagine:glutamine:phenotype][aspartate|asparagine:alanine:phenotype][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:phenotype][citrate|aspartate:pyruvate][succinate|aspartate:glutamine][fumarate|asparagine:aspartate][phenotype]
(13) -1451.705 [asparagine|alanine][alanine|glutamine:phenotype][aspartate|asparagine:alanine:phenotype][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:phenotype][citrate|aspartate:pyruvate][succinate|aspartate:glutamine][fumarate|asparagine:aspartate][phenotype]
(14) -1441.787 [asparagine|alanine:phenotype][alanine|glutamine:phenotype][aspartate|asparagine:alanine:phenotype][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:phenotype][citrate|aspartate:pyruvate][succinate|aspartate:glutamine][fumarate|asparagine:aspartate][phenotype]
(15) -1439.673 [asparagine|alanine:glutamine:phenotype][alanine|glutamine:phenotype][aspartate|asparagine:alanine:phenotype][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:phenotype][citrate|aspartate:pyruvate][succinate|aspartate:glutamine][fumarate|asparagine:aspartate][phenotype]
(16) -1437.841 [asparagine|alanine:glutamine:phenotype][alanine|glutamine:phenotype][aspartate|asparagine:alanine:phenotype][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:phenotype][citrate|aspartate:pyruvate:fumarate][succinate|aspartate:glutamine][fumarate|asparagine:aspartate][phenotype]
(17) -1435.782 [asparagine|alanine:glutamine:phenotype][alanine|glutamine:phenotype][aspartate|asparagine:alanine:phenotype][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:phenotype][citrate|aspartate:fumarate][succinate|aspartate:glutamine][fumarate|asparagine:aspartate][phenotype]
(18) -1434.474 [asparagine|alanine:glutamine:phenotype][alanine|glutamine:phenotype][aspartate|asparagine:alanine:phenotype][pyruvate|asparagine][glutamine|phenotype][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:phenotype][citrate|aspartate:fumarate][succinate|aspartate:glutamine][fumarate|asparagine:aspartate][phenotype]
(19) -1433.998 [asparagine|alanine:glutamine:phenotype][alanine|glutamine:phenotype][aspartate|asparagine:alanine:pyruvate:phenotype][pyruvate|asparagine][glutamine|phenotype][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:phenotype][citrate|aspartate:fumarate][succinate|aspartate:glutamine][fumarate|asparagine:aspartate][phenotype]
(20) -1433.677 [asparagine|alanine:glutamine:phenotype][alanine|glutamine:phenotype][aspartate|asparagine:alanine:pyruvate:phenotype][pyruvate|asparagine][glutamine|phenotype][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:glutamine:phenotype][citrate|aspartate:fumarate][succinate|aspartate:glutamine][fumarate|asparagine:aspartate][phenotype]
Total 5.918 add 0.671 rem 0.05 turn 0.156 sort 0.015 choose 2.211 rest 2.815 ]
[Perturb 0.019 ]
[Autosearch (1) -1629.709 [asparagine|alanine:N-acetyl-aspartyl-glutamate (NAAG)][alanine][aspartate|citrate:phenotype][pyruvate][glutamine][N-acetyl-aspartyl-glutamate (NAAG)][citrate|glutamine:phenotype][succinate][fumarate][phenotype]
(2) -1578.333 [asparagine|alanine:N-acetyl-aspartyl-glutamate (NAAG)][alanine|aspartate][aspartate|citrate:phenotype][pyruvate][glutamine][N-acetyl-aspartyl-glutamate (NAAG)][citrate|glutamine:phenotype][succinate][fumarate][phenotype]
(3) -1548.695 [asparagine|alanine:N-acetyl-aspartyl-glutamate (NAAG)][alanine|aspartate][aspartate|citrate:phenotype][pyruvate][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|aspartate][citrate|glutamine:phenotype][succinate][fumarate][phenotype]
(4) -1523.224 [asparagine|alanine:N-acetyl-aspartyl-glutamate (NAAG)][alanine|aspartate][aspartate|citrate:phenotype][pyruvate][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|aspartate][citrate|glutamine:phenotype][succinate][fumarate|aspartate][phenotype]
(5) -1497.817 [asparagine|alanine:N-acetyl-aspartyl-glutamate (NAAG)][alanine|aspartate][aspartate|citrate:phenotype][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|aspartate][citrate|glutamine:phenotype][succinate][fumarate|aspartate][phenotype]
(6) -1484.433 [asparagine|alanine:N-acetyl-aspartyl-glutamate (NAAG)][alanine|aspartate][aspartate|citrate:phenotype][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:phenotype][citrate|glutamine:phenotype][succinate][fumarate|aspartate][phenotype]
(7) -1473.286 [asparagine|alanine:N-acetyl-aspartyl-glutamate (NAAG)][alanine|aspartate][aspartate|citrate:phenotype][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:phenotype][citrate|glutamine:phenotype][succinate|aspartate][fumarate|aspartate][phenotype]
(8) -1465.34 [asparagine|alanine:N-acetyl-aspartyl-glutamate (NAAG):fumarate][alanine|aspartate][aspartate|citrate:phenotype][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:phenotype][citrate|glutamine:phenotype][succinate|aspartate][fumarate|aspartate][phenotype]
(9) -1458.291 [asparagine|alanine:N-acetyl-aspartyl-glutamate (NAAG):fumarate][alanine|aspartate][aspartate|citrate:phenotype][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:phenotype][citrate|glutamine:phenotype][succinate|aspartate:glutamine][fumarate|aspartate][phenotype]
(10) -1455.667 [asparagine|alanine:N-acetyl-aspartyl-glutamate (NAAG):fumarate][alanine|aspartate][aspartate|citrate:phenotype][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:phenotype][citrate|glutamine:phenotype][succinate|aspartate:glutamine][fumarate|aspartate:citrate][phenotype]
(11) -1454.175 [asparagine|alanine:aspartate:N-acetyl-aspartyl-glutamate (NAAG):fumarate][alanine|aspartate][aspartate|citrate:phenotype][pyruvate|asparagine][glutamine][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:phenotype][citrate|glutamine:phenotype][succinate|aspartate:glutamine][fumarate|aspartate:citrate][phenotype]
(12) -1452.866 [asparagine|alanine:aspartate:N-acetyl-aspartyl-glutamate (NAAG):fumarate][alanine|aspartate][aspartate|citrate:phenotype][pyruvate|asparagine][glutamine|phenotype][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:phenotype][citrate|glutamine:phenotype][succinate|aspartate:glutamine][fumarate|aspartate:citrate][phenotype]
(13) -1451.8 [asparagine|alanine:aspartate:N-acetyl-aspartyl-glutamate (NAAG)][alanine|aspartate][aspartate|citrate:phenotype][pyruvate|asparagine][glutamine|phenotype][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:phenotype][citrate|glutamine:phenotype][succinate|aspartate:glutamine][fumarate|asparagine:aspartate:citrate][phenotype]
(14) -1449.967 [asparagine|alanine:aspartate:N-acetyl-aspartyl-glutamate (NAAG):phenotype][alanine|aspartate][aspartate|citrate:phenotype][pyruvate|asparagine][glutamine|phenotype][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:phenotype][citrate|glutamine:phenotype][succinate|aspartate:glutamine][fumarate|asparagine:aspartate:citrate][phenotype]
(15) -1447.608 [asparagine|alanine:aspartate:phenotype][alanine|aspartate][aspartate|citrate:phenotype][pyruvate|asparagine][glutamine|phenotype][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:phenotype][citrate|glutamine:phenotype][succinate|aspartate:glutamine][fumarate|asparagine:aspartate:citrate][phenotype]
(16) -1446.193 [asparagine|alanine:aspartate:glutamine:phenotype][alanine|aspartate][aspartate|citrate:phenotype][pyruvate|asparagine][glutamine|phenotype][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:phenotype][citrate|glutamine:phenotype][succinate|aspartate:glutamine][fumarate|asparagine:aspartate:citrate][phenotype]
(17) -1440.558 [asparagine|aspartate:glutamine:phenotype][alanine|asparagine:aspartate][aspartate|citrate:phenotype][pyruvate|asparagine][glutamine|phenotype][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:phenotype][citrate|glutamine:phenotype][succinate|aspartate:glutamine][fumarate|asparagine:aspartate:citrate][phenotype]
(18) -1435.855 [asparagine|aspartate:glutamine:phenotype][alanine|asparagine:aspartate:phenotype][aspartate|citrate:phenotype][pyruvate|asparagine][glutamine|phenotype][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:phenotype][citrate|glutamine:phenotype][succinate|aspartate:glutamine][fumarate|asparagine:aspartate:citrate][phenotype]
(19) -1435.534 [asparagine|aspartate:glutamine:phenotype][alanine|asparagine:aspartate:phenotype][aspartate|citrate:phenotype][pyruvate|asparagine][glutamine|phenotype][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:glutamine:phenotype][citrate|glutamine:phenotype][succinate|aspartate:glutamine][fumarate|asparagine:aspartate:citrate][phenotype]
(20) -1435.462 [asparagine|aspartate:glutamine:phenotype][alanine|asparagine:aspartate:pyruvate:phenotype][aspartate|citrate:phenotype][pyruvate|asparagine][glutamine|phenotype][N-acetyl-aspartyl-glutamate (NAAG)|aspartate:glutamine:phenotype][citrate|glutamine:phenotype][succinate|aspartate:glutamine][fumarate|asparagine:aspartate:citrate][phenotype]
Total 6.926 add 0.847 rem 0.09 turn 0.212 sort 0.019 choose 2.159 rest 3.599 ]
Tried 3997 out of approx. 621282536879555072 networks
17.943 ]
Perturb: 0.041 ,Autosearch: 22.843 ,Unique: 0.003
#+end_example

* Predicting
#+BEGIN_SRC R :session "global" :results output :exports both
library(bnlearn)

glutMetabs_model <- bnlearn::model2network(deal::modelstring(thebest))

#+END_SRC

* Prior from reaction data
** Build adjacency matrix
#+BEGIN_SRC R :session "global" :results output :exports 
library(data.table)
inchi_hmdb_common_key<-as.data.frame(fread("/Users/pat271/Desktop/F31_Materials/Data/Reactions/inchi_hmdb_table.tsv",header=TRUE))

reaction_table<-read.table("~/Desktop/F31_Materials/Data/Reactions/inchi_reactions.tsv",sep="\t")

metabolites<-unique(c(as.vector(reaction_table$V1),as.vector(reaction_table$V2)))
reaction_adjacency_matrix<-diag(length(metabolites))
colnames(reaction_adjacency_matrix)<-rownames(reaction_adjacency_matrix)<-metabolites

for(i in 1:nrow(reaction_table)){
  reaction_adjacency_matrix[reaction_table[i,1],reaction_table[i,2]]<-reaction_table[i,3]
}

inchis <- inchi_hmdb_common_key$V1[match(HMDB_ids,inchi_hmdb_common_key$hmdbs)]
inchis <- sapply(inchis, function(x) ifelse(x %in% rownames(reaction_adjacency_matrix), return(x),return(NA)))
inchis<-inchis[!is.na(inchis)]
names <- inchi_hmdb_common_key$names[match(inchis,inchi_hmdb_common_key$V1)]
AAG_reactions <- reaction_adjacency_matrix[inchis,inchis]
colnames(AAG_reactions) <- rownames(AAG_reactions) <- names
heatmap(AAG_reactions)
#+END_SRC

#+RESULTS:
#+begin_example
data.table 1.11.8  Latest news: r-datatable.com

Attaching package: ‘data.table’

The following objects are masked from ‘package:dplyr’:

    between, first, last

The following object is masked from ‘package:purrr’:

    transpose
#+end_example

Disappointingly, no shared reactions with the AAG metabolites... trying with structure

** Classyfire

#+BEGIN_SRC R :session "global" :results output :exports both
AAG_classyfire_table <- as.data.frame(fread("/Users/pat271/Desktop/F31_Materials/Data/AAG_classyfire.txt",sep="\t",header=TRUE))

AAG_classyfire_AM <- apply(AAG_classyfire_table, 1, function(x){
  column <- apply(AAG_classyfire_table, 1, function(y){
    return(length(which(intersect(as.matrix(x[4:10]),as.matrix(y[4:10]))!="")))
  })
  return(column)
})


colnames(AAG_classyfire_AM) <- rownames(AAG_classyfire_AM) <- AAG_common_names

#+END_SRC

#+BEGIN_SRC R :session "global" :results output :exports both

## classyfire_table <- as.data.frame(fread("/Users/pat271/Desktop/F31_Materials/Data/Reactions/inchi_hmdb_classyfire_table.txt",sep="\t",header=TRUE))

## classyfire_AM <- apply(classyfire_table, 1, function(x){
##   column <- apply(classyfire_table, 1, function(y){
##     return(length(which(intersect(as.matrix(x),as.matrix(y))!="")))
##   })
##   return(column)
## })


## colnames(classyfire_AM) <- rownames(classyfire_AM) <- classyfire_table$V1

## save(classyfire_AM,file="classyfire_AM.Rda")

## load("classyfire_AM.Rda")

## inchis <- classyfire_table$V1[match(HMDB_ids,classyfire_table$hmdbs)]

## inchis <- sapply(inchis, function(x) ifelse(x %in% rownames(classyfire_AM), return(x),return(NA)))
## inchis<-inchis[!is.na(inchis)]

AAG_similarity<-AAG_classyfire_AM
##names <- classyfire_table$names[match(inchis,classyfire_table$V1)]

##AAG_similarity <- classyfire_AM[inchis,inchis]
##colnames(AAG_similarity) <- rownames(AAG_similarity) <- names
heatmap(AAG_similarity)
hist(AAG_similarity)

#plot(network(AAG_similarity))

## similarity_network = network::network(AAG_similarity,
##               matrix.type = "adjacency",
##               ignore.eval = FALSE,
##               names.eval = "weights")
## plot(similarity_network)
edges<-matrix(nrow=0,ncol=3)
colnames(edges)<-c("node1","node2","weight")

for(i in 2:nrow(AAG_similarity)){
  for(j in 1:(i-1)){
    if(i!=j & AAG_similarity[i,j]!=1){
      new_edge<-c(rownames(AAG_similarity)[i],colnames(AAG_similarity)[j],AAG_similarity[i,j])
      edges<-rbind(edges,new_edge)
    }
  }
}
edges <-as.data.frame(edges)
edges$weight <- levels(edges$weight)[as.numeric(edges$weight)]

edges <- edges %>% filter(weight > 3)

#+END_SRC

#+RESULTS:

** Build prior
As I understand it, jointprior() can take a graph structure as input.
Use the specifygraph parameter of the network function to draw the prior graph.
Now I need to get jointprior to accept a model with no continuous variables
*** Attempt to change discrete requirement with package functions
 #+NAME: AAG_BN
 #+header: :width 1000 :height 1000 :R-dev-args
 #+BEGIN_SRC R :session "global" :file AAG_BN.png :results output graphics :exports both
 lapply(paste('package:',names(sessionInfo()$otherPkgs),sep=""),detach,character.only=TRUE,unload=TRUE)
 library(deal)
 glutMetabs<-as.data.frame(t(glutMetabs))
 glutMetabs.nw <- deal::network(glutMetabs[,-10],specifygraph = TRUE)

 nw=glutMetabs.nw
 N=NA
 phiprior = "heckerman"
 timetrace = FALSE

 jointnu <- N
 jointrho <- N
 jointalpha <- N


 NN <- prod(dim(jointalpha))
 jointmu <- matrix(NA, NN, nw$nc)
 jointsigma <- list()
 jointphi <- list()



 ############################################################################
 ## Build joint continuous prior                                           ##
 ############################################################################

 ## jcont <- jointcont(nw)
 ## Fix was setting Dim to 0 instead of 'c()' since it will be NULL with no discrete nodes
 Dim <- 0
 TD <- 1
 lablist <- c()
 lab <- c()
 for (i in nw$continuous) lab <- c(lab, nw$nodes[[i]]$name)
 mu <- matrix(0, TD, nw$nc)
 sigma2 <- matrix(0, nw$nc, nw$nc)
 sigma2list <- list()
 colnames(mu) <- lab
 rownames(mu) <- lablist
 rownames(sigma2) <- colnames(sigma2) <- lab
 for (i in 1:TD) sigma2list[[i]] <- sigma2
 names(sigma2list) <- lablist
 calclist <- c()
 allnodes <- c(nw$continuous)
 nidx <- 0
 while (length(setdiff(allnodes, calclist)) > 0) {
     nidx <- nidx%%(nw$nc) + 1
     nid <- nw$continuous[nidx]
     if (length(intersect(nid, calclist)) > 0) {
         next
     }
     node <- nw$nodes[[nid]]
     Pn <- node$prob
     parents <- node$parents
     if (nw$nc > 0) 
         cparents <- sort(intersect(parents, nw$continuous))
     else cparents <- c()
     if (nw$nd > 0) 
         dparents <- sort(intersect(parents, nw$discrete))
     else dparents <- c()
     if (length(setdiff(cparents, calclist)) > 0) {
         next
     }
     if (!length(cparents) > 0) {
         M <- array(1:TD, dim = Dim)
         if (length(dparents) > 0) {
             mdim <- c()
             for (i in dparents) mdim <- c(mdim, nw$nodes[[i]]$levels)
             m <- array(1:TD, dim = mdim)
             ivek <- c(match(dparents, nw$discrete), match(setdiff(nw$discrete, 
                                                                   dparents), nw$discrete))
             jDim <- Dim[ivek]
             bigM <- array(m, jDim)
             permvek <- match(1:nw$nd, ivek)
             bigM <- aperm(bigM, permvek)
             for (i in 1:length(unique(c(bigM)))) {
                 theidx <- M[bigM == i]
                 cf <- findex(theidx, Dim, config = FALSE)
                 cfm <- cf[, match(dparents, nw$discrete)]
                 cfm <- matrix(cfm, nrow = length(theidx))
                 theidxm <- findex(cfm, mdim, config = TRUE)
                 paridx <- match(1:nw$nc, c(nid, cparents))
                 for (k in 1:length(theidx)) {
                     mu[theidx, nidx] <- Pn[theidxm[k], 2]
                     sigma2list[[theidx[k]]][nidx, nidx] <- Pn[theidxm[k], 
                                                               1]
                 }
             }
         }
         else {
             for (i in 1:TD) {
                 mu[i, nidx] <- Pn[2]
                 sigma2list[[i]][nidx, nidx] <- Pn[1]
             }
         }
     }
     else {
         for (k in 1:TD) {
             if (length(dparents) > 0) {
                 mdim <- c()
                 for (i in dparents) mdim <- c(mdim, nw$nodes[[i]]$levels)
                 Mcf <- findex(k, Dim, config = FALSE)
                 didx <- match(dparents, nw$discrete)
                 dcf <- Mcf[, didx]
                 if (length(dcf) == 2) 
                     dcf <- matrix(dcf, ncol = 2)
                 kidx <- findex(dcf, mdim, config = TRUE)
             }
             else kidx <- 1
             parentidx <- match(cparents, nw$continuous)
             calcidx <- match(sort(calclist), nw$continuous)
             if (!length(dparents) > 0) {
                 m.ylx <- Pn[2]
                 s2.ylx <- Pn[1]
                 b.ylx <- Pn[3:length(Pn)]
             }
             else {
                 m.ylx <- Pn[kidx, 2]
                 s2.ylx <- Pn[kidx, 1]
                 b.ylx <- Pn[kidx, 3:ncol(Pn)]
             }
             m.x <- mu[k, parentidx]
             s2.x <- sigma2list[[k]][parentidx, parentidx]
             pid <- match(parentidx, sort(calclist))
             pid <- pid[!is.na(pid)]
             b.calc <- rep(0, length(calcidx))
             b.calc[pid] <- b.ylx
             s2.calc <- sigma2list[[k]][calcidx, calcidx]
             s.xycalc <- s2.calc %*% b.calc
             s.xy <- s2.x %*% b.ylx
             s2.y <- s2.ylx + c(s.xy) %*% b.ylx
             m.y <- m.ylx + b.ylx %*% m.x
             mu[k, nidx] <- m.y
             sigma2list[[k]][nidx, nidx] <- s2.y
             sigma2list[[k]][calcidx, nidx] <- s.xycalc
             sigma2list[[k]][nidx, calcidx] <- t(s.xycalc)
         }
     }
     calclist <- c(calclist, nid)
 }

 jcont = list(mu = mu, sigma2 = sigma2list)

 ######################################################################

 jointmu <- jcont$mu
 jointsigma <- jcont$sigma2
 dnames <- colnames(jointmu)
 for (i in 1:NN) {
     if (phiprior == "bottcher") {
         jointphi[[i]] <- jointsigma[[i]] * (jointnu[i] - 
                                             1)
     }else {
         if (phiprior == "heckerman") {
             jointphi[[i]] <- (jointrho[i] - 2)/(jointnu[i] + 
                                                 1) * jointnu[i] * jointsigma[[i]]
         }
         else stop("No such phiprior implemented")
     }
     colnames(jointmu) <- dnames
     colnames(jointsigma[[i]]) <- dnames
     rownames(jointsigma[[i]]) <- dnames
     colnames(jointphi[[i]]) <- dnames
     rownames(jointphi[[i]]) <- dnames
 }

 glutMetabs.prior = list(jointalpha = jointalpha, jointnu = jointnu, jointrho = jointrho, 
      jointmu = jointmu, jointsigma = jointsigma, jointphi = jointphi)

 #######################################################################
 nw <- glutMetabs.nw
 df <- glutMetabs
 prior <- glutMetabs.prior
 nodelist <- 1:size(nw)
 trylist = vector("list",size(nw))
 old <- df
 for (i in nodelist) {
   node <- nw$nodes[[i]]
   if (!is.null(trylist[[node$idx]])) {
     cur <- paste(node$parents, collapse = ":")
     curm <- match(cur, trylist[[node$idx]][, 1])
     if (!is.na(curm)) {
       nw$nodes[[i]]$loglik <- as.numeric(trylist[[node$idx]][curm, 
                                                              2])
       break
     }
   }
   node <- cond.node(node, nw, prior)
   node$condposterior <- node$condprior
   node$loglik <- 0
   ##node <- learnnode(node, nw, df, timetrace = FALSE)

 ##########################################################################
 ## Working on learnnode                                                 ##
 ##########################################################################
  
   if (!length(node$parents) > 0) {
     res <- postc0c(node$condposterior[[1]]$mu, node$condposterior[[1]]$tau, 
                    node$condposterior[[1]]$rho, node$condposterior[[1]]$phi, 
                    df[, node$idx])
     node$condposterior[[1]]$mu <- res$mu
     node$condposterior[[1]]$tau <- res$tau
     node$condposterior[[1]]$rho <- res$rho
     node$condposterior[[1]]$phi <- res$phi
     node$loglik <- res$loglik
     node <- postdist.node(node, nw)
   }else{
     parents <- node$parents
     cparents <- sort(intersect(parents, nw$continuous))
     res <- postcc(node$condposterior[[1]]$mu, node$condposterior[[1]]$tau, 
                   node$condposterior[[1]]$rho, node$condposterior[[1]]$phi, 
                   df[, node$idx], cbind(1, df[, cparents]))
     node$condposterior[[1]]$mu <- res$mu
     node$condposterior[[1]]$tau <- res$tau
     node$condposterior[[1]]$rho <- res$rho
     node$condposterior[[1]]$phi <- res$phi
     node$loglik <- res$loglik
     node <- postdist.node(node, nw)
 }
 ##########################################################################  
   streng <- paste(node$parents, collapse = ":")
   tal <- node$loglik
   if (is.null(trylist[[i]])) {
     trylist[[i]] <- cbind(streng, tal)
   }
   else trylist[[i]] <- rbind(trylist[[i]], cbind(streng, 
                                                  tal))
   nw$nodes[[i]] <- node
 }
 nw$score <- 0
 for (i in 1:nw$n) nw$score <- nw$score + nw$nodes[[i]]$loglik
 if (timetrace) {
   t2 <- proc.time()
   cat((t2 - t1)[1], "]")
 }
 list(nw = nw, trylist = trylist)

 glutMetabs.model <- learn(glutMetabs.nw,glutMetabs,glutMetabs.prior)$nw


 #+END_SRC
*** Dummy discrete node
 learnnode function is having issues (part of the "learn" function)

 #+BEGIN_SRC R :session "global" :results output :exports both
 glutMetabs$phenotype<-factor(rep("0",nrow(glutMetabs)))

 glutMetabs.nw.test<-network(glutMetabs,specifygraph=TRUE)

 banlist<-matrix(c(1:9,rep(10,times=9),rep(10,times=9),1:9),ncol=2)
 banlist(glutMetabs.nw)<-banlist

 glutMetabs.prior.test <- jointprior(glutMetabs.nw.test)
 glutMetabs.model <- learn(glutMetabs.nw.test,glutMetabs,glutMetabs.prior.test)$nw
 glutMetabs.model$banlist <- banlist
 glutMetabs.search <- autosearch(glutMetabs.model,glutMetabs,glutMetabs.prior.test,trace=TRUE)

 glutMetabs.heuristic <- heuristic(glutMetabs.search$nw,glutMetabs,
                            glutMetabs.prior.test,
                            restart=2,degree=10, trace=TRUE,trylist=glutMetabs.search$trylist)
 glutMetabs.final.model <- glutMetabs.heuristic$nw
 plot(glutMetabs.final.model)
 #+END_SRC

**** Multivariate methods: LASSO, MANOVA, Logistic Regression
**** Use model w/ discrete node as an alternative

* Cross-validation
** Univariate
#+BEGIN_SRC R :session "global" :results output :exports both

glutMetabs$phenotype<-c(rep(0,47),rep(1,61))

ground_truth<-apply(glutMetabs[,-10],2,function(x) return(t.test(x[which(glutMetabs$phenotype==0)],x[which(glutMetabs$phenotype==1)])$p.value))

set.seed(123)
CV_vector_healthy <- sample(1:47)
CV_vector_tumor <- sample(48:108)

CV_results<-sapply(1:5,function(x){
  gp1<-CV_vector_healthy[(9*(x-1)+1):(9*x)]
  gp2<-CV_vector_tumor[(12*(x-1)):((12*x))]
  return(apply(glutMetabs[,-10],2,function(x) return(t.test(x[gp1],x[gp2])$p.value)))
})

CV_results_gathered<-gather(data.frame(t(CV_results)))
CV_results_gathered$key<-factor(CV_results_gathered$key,
                                       levels = names(sort(ground_truth)),
                                       ordered = TRUE)

univariate<-ggplot(CV_results_gathered,aes(x=key,y=-log10(value))) +
  geom_boxplot() +
  theme_classic() +
  theme(axis.text.x=element_text(angle=45,hjust=1)) +
  annotate("point",x=1:9,y=sort(-log10(ground_truth),decreasing = TRUE),color="red",size=4)

ground_truth_logical = ground_truth < 0.05
accuracy <- apply(CV_results, 2, function(x){
  result=apply(data.frame(test = c(x < 0.05),ground = ground_truth_logical), 1, function(y){
    if(y[1]==y[2]){
      return(1)
    }else{
      return(0)
    }
  })
  return(sum(result)/length(result))
})

#+END_SRC

Mean accuracy of 0.578. Very beatable!
** Multivariate
#+BEGIN_SRC R :session "global" :results output :exports both
library(caret)

full_model <- plsda(glutMetabs[,-10],factor(glutMetabs[,10]))

ground_truth <- varImp(full_model)

CV_results_PLS_DA<-sapply(1:5,function(x){
  gp1<-CV_vector_healthy[(9*(x-1)+1):(9*x)]
  gp2<-CV_vector_tumor[(12*(x-1)):((12*x))]
  CV_DF<-rbind(glutMetabs[gp1,],glutMetabs[gp2,])
  return(varImp(plsda(CV_DF[,-10],factor(CV_DF[,10]))))
})
CV_results_PLS_DA<-data.frame(t(data.frame(CV_results_PLS_DA)))
colnames(CV_results_PLS_DA)<-colnames(glutMetabs)[1:9]

CV_results_PLS_DA_gathered<-gather(CV_results_PLS_DA)
CV_results_PLS_DA_gathered$key<-factor(CV_results_PLS_DA_gathered$key,
                                       levels = rownames(ground_truth)[order(ground_truth$Overall, decreasing = TRUE)],
                                       ordered = TRUE)

multivariate<-ggplot(CV_results_PLS_DA_gathered,aes(x=key,y=value)) +
  geom_boxplot() +
  theme_classic() +
  theme(axis.text.x=element_text(angle=45,hjust=1)) +
  annotate("point",x=1:9,y=sort(as.vector(t(ground_truth)),decreasing = TRUE),color="red",size=4)

#+END_SRC
Aspartate appears to be the clear smoking gun. The model also has
pyruvate second to last, with glutamine placing last. I should include
some evaluation of how good the predictions are too...

**** Tanimoto similarity notes
     - One Ramp ID per line in metabolite_ids.txt files
     - IDs of all metabs that passed 0.6 threshold in conn_ids.txt files per line
     - Weights in conn_weights.txt per line
#+NAME: UniAndMultivariate
#+header: :width 1000 :height 1000 :R-dev-args
#+BEGIN_SRC R :session "global" :file UniAndMultivariate.png :results output graphics :exports both
library(cowplot)
plot_grid(univariate,multivariate,ncol=1)

#+END_SRC

#+RESULTS: UniAndMultivariate
[[file:UniAndMultivariate.png]]

** Converting PLS-DA to p-value
#+BEGIN_SRC R :session "global" :results output :exports both
  CV_distribution = matrix(ncol=5,nrow=0)
  FD_distribution = matrix(ncol=5,nrow=0)
  for(j in 1:100){
      if(j %% 5 == 0){
          print(paste0(j," iterations completed"))
      }
      set.seed(j)
      data.permuted<-glutMetabs[sample(1:nrow(glutMetabs)),sample(1:(ncol(glutMetabs)-1))]
      data.permuted<-cbind(data.permuted,glutMetabs[,10])
      permuted_model<-plsda(data.permuted[,-10],factor(data.permuted[,10]))
      full_result<-varImp(plsda(data.permuted[,-10],factor(data.permuted[,10])))

      FD_distribution<-rbind(FD_distribution,
                             full_result)
      
      CV_results_PLS_DA_permuted<-sapply(1:5,function(x){
          gp1<-CV_vector_healthy[(9*(x-1)+1):(9*x)]
          gp2<-CV_vector_tumor[(12*(x-1)):((12*x))]
          CV_DF<-rbind(data.permuted[gp1,],data.permuted[gp2,])
          return(varImp(plsda(CV_DF[,-10],factor(CV_DF[,10]))))
      })
      CV_distribution<-rbind(CV_distribution,
                             CV_results_PLS_DA_permuted)
  }
  CV_distribution <- apply(CV_distribution,2,unlist)
  FD_distribution <- apply(FD_distribution,2,unlist)

  CV_distribution_vector<-sort(as.vector(CV_distribution))
  FD_distribution_vector<-sort(as.vector(FD_distribution))

  ground_truth_pval<-apply(ground_truth,1,function(x){
      return(length(which(FD_distribution_vector > x))/length(FD_distribution_vector))
  })
  CV_results_PLS_DA_pval<-apply(CV_results_PLS_DA_gathered,1,function(x){
      return(c(x[1],length(which(CV_distribution_vector > x[2]))/length(CV_distribution_vector)))
  })
  CV_results_PLS_DA_pval<-data.frame(t(CV_results_PLS_DA_pval))
  colnames(CV_results_PLS_DA_pval)<-c("key","value")
  CV_results_PLS_DA_pval$value<-as.numeric(as.character(CV_results_PLS_DA_pval$value))

  CV_results_PLS_DA_pval$key<-factor(CV_results_PLS_DA_pval$key,
                                     levels = levels(CV_results_PLS_DA_pval$key)[order(ground_truth_pval)])
  
  ggplot(CV_results_PLS_DA_pval,aes(x=key,y=-log10(value))) +
      geom_boxplot() +
      theme_classic() +
      theme(axis.text.x=element_text(angle=45,hjust=1)) +
      annotate("point",x=1:9,y=as.vector(t(ground_truth_pval)[,order(ground_truth_pval)]),
               color="red",size=4)
  
#+END_SRC
** Bayesian Network uninformative
*** Full model
#+NAME: uninformative_prior
#+header: :width 1000 :height 1000 :R-dev-args
#+BEGIN_SRC R :session "global" :file uninformative_prior.png :results output graphics :export both
library(rags2ridges)
library(LaplacesDemon)
library(rlist)

for(i in c("healthy","disease")){
  covariance_list<-list()
  mu_list<-list()
  if(i == "healthy"){
    data = glutMetabs[1:47,]
  }else{
    data = glutMetabs[48:108,]
  }
  glutMetabs.nw<-network(data)
  banlist<-matrix(c(1:9,rep(10,times=9),rep(10,times=9),1:9),ncol=2)
  banlist(glutMetabs.nw)<-banlist
  glutMetabs.prior <- jointprior(glutMetabs.nw)
  glutMetabs.model <- learn(glutMetabs.nw,glutMetabs,
                            glutMetabs.prior)$nw
  glutMetabs.model$banlist <- banlist
  glutMetabs.search <- autosearch(glutMetabs.model,
                                  glutMetabs,glutMetabs.prior,
                                  trace=TRUE)
  glutMetabs.heuristic <- heuristic(glutMetabs.search$nw,glutMetabs,
                                    glutMetabs.prior,
                                    restart=2,degree=10, trace=TRUE,
                                    trylist=glutMetabs.search$trylist)
  glutMetabs.final.model <- glutMetabs.heuristic$nw
  glutMetab.nodes <- nodes(glutMetabs.final.model)
  for(j in glutMetab.nodes[1:9]){
    if(class(j$condprior[[1]][[1]])=="matrix"){
      mu_list<-list.append(mu_list,j$condposterior[[1]][[3]])
      prec_mat<-j$condposterior[[1]][[1]]
      colnames(prec_mat)<-
        rownames(prec_mat)<-
        colnames(j$condprior[[1]][[1]])
      cov_mat<-Prec2Cov(prec_mat)
      covariance_list<-list.append(covariance_list,cov_mat)    
    }else{
      mu_list<-list.append(mu_list,j$condposterior[[1]][[4]])
      covariance_list<-list.append(covariance_list,
                                   1/j$condposterior[[1]][[6]])
    }
  }
  names(mu_list)<-names(covariance_list)<-colnames(glutMetabs)[1:9]
  assign(paste0(i,"_mu_list"),mu_list)
  assign(paste0(i,"_covariance_list"),covariance_list)
}

############################################################################
## Compare                                                                ##
############################################################################
## divergences <- c()
package_divergences <- c()

## KLDivUni<-function(mean1,mean2,var1,var2){
##   sd1 <- sqrt(var1)
##   sd2<-sqrt(var2)
##   divergence <- log(sd1/sd2) + (var1 + (mean1-mean2)^2)/(2*var2)-.5
##   return(divergence)
## }

for(i in colnames(glutMetabs)[1:9]){
  healthy_cov<-healthy_covariance_list[i][[1]]
  disease_cov<-disease_covariance_list[i][[1]]
  healthy_mu<-unlist(healthy_mu_list[i])
  disease_mu<-unlist(disease_mu_list[i])
  if(class(healthy_cov)=="matrix"){
    healthy_cov<-healthy_cov[1,1]
  }
  if(class(disease_cov)=="matrix"){
    disease_cov<-disease_cov[1,1]
  }
  healthy_mu<-healthy_mu[1]
  disease_mu<-disease_mu[1]
  healthy_var<-prec2var(healthy_cov)
  disease_var<-prec2var(disease_cov)
  ## divergences<-c(divergences,KLDivUni(healthy_mu,disease_mu,
  ##                                     healthy_var,disease_var))
  px <- dnorm(runif(100),healthy_mu,healthy_var)
  py <- dnorm(runif(100),disease_mu,disease_var)
  package_divergences<-c(package_divergences,KLD(px,py)$mean.sum.KLD)
  ## rownames(healthy_cov)[1]<-colnames(healthy_cov)[1]<-
  ## rownames(disease_cov)[1]<-colnames(disease_cov)[1]<-i
  ## names(healthy_mu)<-colnames(healthy_cov)
  ## names(disease_mu)<-colnames(disease_cov)
  ## healthy_cov_full<-disease_cov_full<-matrix(0,ncol=9,nrow=9,
  ## dimnames=list(colnames(glutMetabs)[1:9],colnames(glutMetabs)[1:9]))
  ## for(j in rownames(healthy_cov_full)){
  ##   for(k in colnames(healthy_cov_full)){
  ##     if(j %in% rownames(healthy_cov) & k %in% rownames(healthy_cov)){
  ##       healthy_cov_full[j,k]<-healthy_cov[j,k]
  ##     }
  ##   }
  ## }
  ## for(j in rownames(disease_cov_full)){
  ##   for(k in colnames(disease_cov_full)){
  ##     if(j %in% rownames(disease_cov) & k %in% rownames(disease_cov)){
  ##       disease_cov_full[j,k]<-disease_cov[j,k]
  ##     }
  ##   }
  ## }
  ## healthy_mu_full<-rep(0,times=9)
  ## names(healthy_mu_full)<-rownames(healthy_cov_full)
  ## healthy_mu_full[names(healthy_mu)]<-healthy_mu
  ## disease_mu_full<-rep(0,times=9)
  ## names(disease_mu_full)<-rownames(disease_cov_full)
  ## disease_mu_full[names(disease_mu)]<-disease_mu
  ## informative_nodes<-apply(healthy_cov_full+disease_cov_full,1,function(x) ifelse(sum(x)==0,return(FALSE),return(TRUE)))
  ## healthy_cov_full<-healthy_cov_full[informative_nodes,informative_nodes]
  ## disease_cov_full<-disease_cov_full[informative_nodes,informative_nodes]
  ## healthy_cov_full<-Prec2Cov(healthy_cov_full)
  ## disease_cov_full<-Prec2Cov(disease_cov_full)
  ## healthy_mu_full<-healthy_mu_full[informative_nodes]
  ## disease_mu_full<-disease_mu_full[informative_nodes]
  ## divergences<-c(divergences,KLdiv(healthy_mu_full, disease_mu_full, healthy_cov_full, disease_cov_full))
}
names(package_divergences)<-colnames(glutMetabs)[1:9]

#+END_SRC
*** Cross-validate uninformative
#+NAME: uninformative_CV
#+header: :width 1000 :height 1000 :R-dev-args
#+BEGIN_SRC R :session "global" :file uninformative_CV.png :results output graphics :export both
library(Matrix)

CV_results_BN_uninf<-sapply(1:5,function(x){
  print("fired")
  gp1<-CV_vector_healthy[(9*(x-1)+1):(9*x)]
  gp2<-CV_vector_tumor[(12*(x-1)):((12*x))]
  for(i in c("healthy","disease")){
    covariance_list<-list()
    mu_list<-list()
    if(i == "healthy"){
      data = glutMetabs[gp1,]
    }else{
      data = glutMetabs[gp2,]
    }
    glutMetabs.nw<-network(data)
    banlist<-matrix(c(1:9,rep(10,times=9),rep(10,times=9),1:9),ncol=2)
    banlist(glutMetabs.nw)<-banlist
    glutMetabs.prior <- jointprior(glutMetabs.nw)
    glutMetabs.model <- learn(glutMetabs.nw,glutMetabs,
                              glutMetabs.prior)$nw
    glutMetabs.model$banlist <- banlist
    glutMetabs.search <- autosearch(glutMetabs.model,
                                    glutMetabs,glutMetabs.prior,
                                    trace=TRUE)
    glutMetabs.heuristic <- heuristic(glutMetabs.search$nw,glutMetabs,
                                      glutMetabs.prior,
                                      restart=2,degree=10, trace=TRUE,
                                      trylist=glutMetabs.search$trylist)
    glutMetabs.final.model <- glutMetabs.heuristic$nw
    glutMetab.nodes <- nodes(glutMetabs.final.model)
    print(paste0("MODEL ", x, " BUILT"))
    for(j in glutMetab.nodes[1:9]){
      if(class(j$condprior[[1]][[1]])=="matrix"){
        mu_list<-list.append(mu_list,j$condposterior[[1]][[3]])
        prec_mat<-j$condposterior[[1]][[1]]
        colnames(prec_mat)<-
          rownames(prec_mat)<-
          colnames(j$condprior[[1]][[1]])
        prec_mat<-as.matrix(forceSymmetric(prec_mat))
        cov_mat<-Prec2Cov(prec_mat)
        covariance_list<-list.append(covariance_list,cov_mat)    
      }else{
        mu_list<-list.append(mu_list,j$condposterior[[1]][[4]])
        covariance_list<-list.append(covariance_list,
                                     1/j$condposterior[[1]][[6]])
      }
    }
    names(mu_list)<-names(covariance_list)<-colnames(glutMetabs)[1:9]
    assign(paste0(i,"_mu_list"),mu_list)
    assign(paste0(i,"_covariance_list"),covariance_list)
  }
  package_divergences <- c()
  for(i in colnames(glutMetabs)[1:9]){
    healthy_cov<-healthy_covariance_list[i][[1]]
    disease_cov<-disease_covariance_list[i][[1]]
    healthy_mu<-unlist(healthy_mu_list[i])
    disease_mu<-unlist(disease_mu_list[i])
    if(class(healthy_cov)=="matrix"){
      healthy_cov<-healthy_cov[1,1]
    }
    if(class(disease_cov)=="matrix"){
      disease_cov<-disease_cov[1,1]
    }
    healthy_mu<-healthy_mu[1]
    disease_mu<-disease_mu[1]
    healthy_var<-prec2var(healthy_cov)
    disease_var<-prec2var(disease_cov)
    px <- dnorm(runif(100),healthy_mu,healthy_var)
    py <- dnorm(runif(100),disease_mu,disease_var)
    package_divergences<-c(package_divergences,KLD(px,py)$mean.sum.KLD)
  }
  return(package_divergences)
})
rownames(CV_results_BN_uninf)<-colnames(glutMetabs)[1:9]
CV_results_BN_uninf<-data.frame(CV_results_BN_uninf)
CV_results_BN_uninf_gathered<-gather(data.frame(t(CV_results_BN_uninf)))
CV_results_BN_uninf_gathered$key<-factor(CV_results_BN_uninf_gathered$key,
                                       levels = names(sort(package_divergences,decreasing = TRUE)),
                                       ordered = TRUE)


uninformative<-ggplot(CV_results_BN_uninf_gathered,aes(x=key,y=value+0.01e-10)) +
  geom_boxplot() +
  theme_classic() +
  theme(axis.text.x=element_text(angle=45,hjust=1)) +
  annotate("point",x=1:9,y=sort(package_divergences,decreasing = TRUE),color="red",size=4)##+
  ##scale_y_continuous(trans='log10')


#+END_SRC

Amir says need marginal distribution of nodes which should be
univariate.

** P value transformation
#+BEGIN_SRC R :session "global" :results output :exports both
package_divergences_permuted <- c()
  for(j in 1:100){
      if(j %% 5 == 0){
          print(paste0(j," iterations completed"))
      }
      set.seed(j)
      
      data.permuted<-glutMetabs[sample(1:nrow(glutMetabs)),sample(1:(ncol(glutMetabs)-1))]
      data.permuted<-cbind(data.permuted,as.factor(glutMetabs[,10]))
      
      for(i in c("healthy","disease")){
          covariance_list<-list()
          mu_list<-list()
          if(i == "healthy"){
              data = data.permuted[1:47,]
          }else{
              data = data.permuted[48:108,]
          }
          data.permuted.nw<-network(data)
          banlist<-matrix(c(1:9,rep(10,times=9),rep(10,times=9),1:9),ncol=2)
          banlist(data.permuted.nw)<-banlist
          data.permuted.prior <- jointprior(data.permuted.nw)
          data.permuted.model <- learn(data.permuted.nw,data.permuted,
                                    data.permuted.prior)$nw
          data.permuted.model$banlist <- banlist
          data.permuted.search <- autosearch(data.permuted.model,
                                          data.permuted,data.permuted.prior,
                                          trace=TRUE)
          data.permuted.heuristic <- heuristic(data.permuted.search$nw,data.permuted,
                                            data.permuted.prior,
                                            restart=2,degree=10, trace=TRUE,
                                            trylist=data.permuted.search$trylist)
          data.permuted.final.model <- data.permuted.heuristic$nw
          glutMetab.nodes <- deal::nodes(data.permuted.final.model)
          for(j in glutMetab.nodes[1:9]){
              if(class(j$condprior[[1]][[1]])=="matrix"){
                  mu_list<-list.append(mu_list,j$condposterior[[1]][[3]])
                  prec_mat<-j$condposterior[[1]][[1]]
                  colnames(prec_mat)<-
                      rownames(prec_mat)<-
                      colnames(j$condprior[[1]][[1]])
                  cov_mat<-Prec2Cov(prec_mat)
                  covariance_list<-list.append(covariance_list,cov_mat)    
              }else{
                  mu_list<-list.append(mu_list,j$condposterior[[1]][[4]])
                  covariance_list<-list.append(covariance_list,
                                               1/j$condposterior[[1]][[6]])
              }
          }
          names(mu_list)<-names(covariance_list)<-colnames(data.permuted)[1:9]
          assign(paste0(i,"_mu_list"),mu_list)
          assign(paste0(i,"_covariance_list"),covariance_list)
      }

  ############################################################################
      ## Compare                                                                ##
  ############################################################################
      package_divergences <- c()

      for(i in colnames(glutMetabs)[1:9]){
          healthy_cov<-healthy_covariance_list[i][[1]]
          disease_cov<-disease_covariance_list[i][[1]]
          healthy_mu<-unlist(healthy_mu_list[i])
          disease_mu<-unlist(disease_mu_list[i])
          if(class(healthy_cov)=="matrix"){
              healthy_cov<-healthy_cov[1,1]
          }
          if(class(disease_cov)=="matrix"){
              disease_cov<-disease_cov[1,1]
          }
          healthy_mu<-healthy_mu[1]
          disease_mu<-disease_mu[1]
          healthy_var<-prec2var(healthy_cov)
          disease_var<-prec2var(disease_cov)

          px <- dnorm(runif(100),healthy_mu,healthy_var)
          py <- dnorm(runif(100),disease_mu,disease_var)
          package_divergences<-c(package_divergences,KLD(px,py)$mean.sum.KLD)
      }
      names(package_divergences)<-colnames(glutMetabs)[1:9]
      package_divergences_permuted<-c(package_divergences_permuted,package_divergences)
  }
#+END_SRC

** Bayesian Network informative
*** Full model
#+NAME: informative_prior
#+header: :width 1000 :height 1000 :R-dev-args
#+BEGIN_SRC R :session "global" :file informative_prior.png :results output graphics :export both
library(rags2ridges)
library(LaplacesDemon)
library(rlist)

for(i in c("healthy","disease")){
  covariance_list<-list()
  mu_list<-list()
  if(i == "healthy"){
    data = glutMetabs[1:47,]
  }else{
    data = glutMetabs[48:108,]
  }
  glutMetabs.nw<-network(data,specifygraph = TRUE)
  banlist<-matrix(c(1:9,rep(10,times=9),rep(10,times=9),1:9),ncol=2)
  banlist(glutMetabs.nw)<-banlist
  glutMetabs.prior <- jointprior(glutMetabs.nw)
  glutMetabs.model <- learn(glutMetabs.nw,glutMetabs,
                            glutMetabs.prior)$nw
  glutMetabs.model$banlist <- banlist
  glutMetabs.search <- autosearch(glutMetabs.model,
                                  glutMetabs,glutMetabs.prior,
                                  trace=TRUE)
  glutMetabs.heuristic <- heuristic(glutMetabs.search$nw,glutMetabs,
                                    glutMetabs.prior,
                                    restart=2,degree=10, trace=TRUE,
                                    trylist=glutMetabs.search$trylist)
  glutMetabs.final.model <- glutMetabs.heuristic$nw
  glutMetab.nodes <- nodes(glutMetabs.final.model)
  for(j in glutMetab.nodes[1:9]){
    if(class(j$condprior[[1]][[1]])=="matrix"){
      mu_list<-list.append(mu_list,j$condposterior[[1]][[3]])
      prec_mat<-j$condposterior[[1]][[1]]
      colnames(prec_mat)<-
        rownames(prec_mat)<-
        colnames(j$condprior[[1]][[1]])
      cov_mat<-Prec2Cov(prec_mat)
      covariance_list<-list.append(covariance_list,cov_mat)    
    }else{
      mu_list<-list.append(mu_list,j$condposterior[[1]][[4]])
      covariance_list<-list.append(covariance_list,
                                   1/j$condposterior[[1]][[6]])
    }
  }
  names(mu_list)<-names(covariance_list)<-colnames(glutMetabs)[1:9]
  assign(paste0(i,"_mu_list"),mu_list)
  assign(paste0(i,"_covariance_list"),covariance_list)
}

############################################################################
## Compare                                                                ##
############################################################################
## divergences <- c()
package_divergences_informative <- c()

## KLDivUni<-function(mean1,mean2,var1,var2){
##   sd1 <- sqrt(var1)
##   sd2<-sqrt(var2)
##   divergence <- log(sd1/sd2) + (var1 + (mean1-mean2)^2)/(2*var2)-.5
##   return(divergence)
## }

for(i in colnames(glutMetabs)[1:9]){
  healthy_cov<-healthy_covariance_list[i][[1]]
  disease_cov<-disease_covariance_list[i][[1]]
  healthy_mu<-unlist(healthy_mu_list[i])
  disease_mu<-unlist(disease_mu_list[i])
  if(class(healthy_cov)=="matrix"){
    healthy_cov<-healthy_cov[1,1]
  }
  if(class(disease_cov)=="matrix"){
    disease_cov<-disease_cov[1,1]
  }
  healthy_mu<-healthy_mu[1]
  disease_mu<-disease_mu[1]
  healthy_var<-prec2var(healthy_cov)
  disease_var<-prec2var(disease_cov)
  ## divergences<-c(divergences,KLDivUni(healthy_mu,disease_mu,
  ##                                     healthy_var,disease_var))
  px <- dnorm(runif(100),healthy_mu,healthy_var)
  py <- dnorm(runif(100),disease_mu,disease_var)
  package_divergences_informative<-c(package_divergences_informative,KLD(px,py)$mean.sum.KLD)
  ## rownames(healthy_cov)[1]<-colnames(healthy_cov)[1]<-
  ## rownames(disease_cov)[1]<-colnames(disease_cov)[1]<-i
  ## names(healthy_mu)<-colnames(healthy_cov)
  ## names(disease_mu)<-colnames(disease_cov)
  ## healthy_cov_full<-disease_cov_full<-matrix(0,ncol=9,nrow=9,
  ## dimnames=list(colnames(glutMetabs)[1:9],colnames(glutMetabs)[1:9]))
  ## for(j in rownames(healthy_cov_full)){
  ##   for(k in colnames(healthy_cov_full)){
  ##     if(j %in% rownames(healthy_cov) & k %in% rownames(healthy_cov)){
  ##       healthy_cov_full[j,k]<-healthy_cov[j,k]
  ##     }
  ##   }
  ## }
  ## for(j in rownames(disease_cov_full)){
  ##   for(k in colnames(disease_cov_full)){
  ##     if(j %in% rownames(disease_cov) & k %in% rownames(disease_cov)){
  ##       disease_cov_full[j,k]<-disease_cov[j,k]
  ##     }
  ##   }
  ## }
  ## healthy_mu_full<-rep(0,times=9)
  ## names(healthy_mu_full)<-rownames(healthy_cov_full)
  ## healthy_mu_full[names(healthy_mu)]<-healthy_mu
  ## disease_mu_full<-rep(0,times=9)
  ## names(disease_mu_full)<-rownames(disease_cov_full)
  ## disease_mu_full[names(disease_mu)]<-disease_mu
  ## informative_nodes<-apply(healthy_cov_full+disease_cov_full,1,function(x) ifelse(sum(x)==0,return(FALSE),return(TRUE)))
  ## healthy_cov_full<-healthy_cov_full[informative_nodes,informative_nodes]
  ## disease_cov_full<-disease_cov_full[informative_nodes,informative_nodes]
  ## healthy_cov_full<-Prec2Cov(healthy_cov_full)
  ## disease_cov_full<-Prec2Cov(disease_cov_full)
  ## healthy_mu_full<-healthy_mu_full[informative_nodes]
  ## disease_mu_full<-disease_mu_full[informative_nodes]
  ## divergences<-c(divergences,KLdiv(healthy_mu_full, disease_mu_full, healthy_cov_full, disease_cov_full))
}
names(package_divergences_informative)<-colnames(glutMetabs)[1:9]

#+END_SRC

*** Cross-validate uninformative
#+NAME: uninformative_CV
#+header: :width 1000 :height 1000 :R-dev-args
#+BEGIN_SRC R :session "global" :file uninformative_CV.png :results output graphics :export both
library(Matrix)

CV_results_BN_inf<-sapply(1:5,function(x){
  print("fired")
  gp1<-CV_vector_healthy[(9*(x-1)+1):(9*x)]
  gp2<-CV_vector_tumor[(12*(x-1)):((12*x))]
  for(i in c("healthy","disease")){
    covariance_list<-list()
    mu_list<-list()
    if(i == "healthy"){
      data = glutMetabs[gp1,]
    }else{
      data = glutMetabs[gp2,]
    }
    glutMetabs.nw<-network(data,specifygraph = TRUE)
    banlist<-matrix(c(1:9,rep(10,times=9),rep(10,times=9),1:9),ncol=2)
    banlist(glutMetabs.nw)<-banlist
    glutMetabs.prior <- jointprior(glutMetabs.nw)
    glutMetabs.model <- learn(glutMetabs.nw,glutMetabs,
                              glutMetabs.prior)$nw
    glutMetabs.model$banlist <- banlist
    glutMetabs.search <- autosearch(glutMetabs.model,
                                    glutMetabs,glutMetabs.prior,
                                    trace=TRUE)
    glutMetabs.heuristic <- heuristic(glutMetabs.search$nw,glutMetabs,
                                      glutMetabs.prior,
                                      restart=2,degree=10, trace=TRUE,
                                      trylist=glutMetabs.search$trylist)
    glutMetabs.final.model <- glutMetabs.heuristic$nw
    glutMetab.nodes <- nodes(glutMetabs.final.model)
    print(paste0("MODEL ",x,"_",i," BUILT"))
    for(j in glutMetab.nodes[1:9]){
      if(class(j$condprior[[1]][[1]])=="matrix"){
        mu_list<-list.append(mu_list,j$condposterior[[1]][[3]])
        prec_mat<-j$condposterior[[1]][[1]]
        colnames(prec_mat)<-
          rownames(prec_mat)<-
          colnames(j$condprior[[1]][[1]])
        prec_mat<-as.matrix(forceSymmetric(prec_mat))
        cov_mat<-Prec2Cov(prec_mat)
        covariance_list<-list.append(covariance_list,cov_mat)    
      }else{
        mu_list<-list.append(mu_list,j$condposterior[[1]][[4]])
        covariance_list<-list.append(covariance_list,
                                     1/j$condposterior[[1]][[6]])
      }
    }
    names(mu_list)<-names(covariance_list)<-colnames(glutMetabs)[1:9]
    assign(paste0(i,"_mu_list"),mu_list)
    assign(paste0(i,"_covariance_list"),covariance_list)
  }
  package_divergences <- c()
  for(i in colnames(glutMetabs)[1:9]){
    healthy_cov<-healthy_covariance_list[i][[1]]
    disease_cov<-disease_covariance_list[i][[1]]
    healthy_mu<-unlist(healthy_mu_list[i])
    disease_mu<-unlist(disease_mu_list[i])
    if(class(healthy_cov)=="matrix"){
      healthy_cov<-healthy_cov[1,1]
    }
    if(class(disease_cov)=="matrix"){
      disease_cov<-disease_cov[1,1]
    }
    healthy_mu<-healthy_mu[1]
    disease_mu<-disease_mu[1]
    healthy_var<-prec2var(healthy_cov)
    disease_var<-prec2var(disease_cov)
    px <- dnorm(runif(100),healthy_mu,healthy_var)
    py <- dnorm(runif(100),disease_mu,disease_var)
    package_divergences<-c(package_divergences,KLD(px,py)$mean.sum.KLD)
  }
  return(package_divergences)
})
rownames(CV_results_BN_inf)<-colnames(glutMetabs)[1:9]
CV_results_BN_inf<-data.frame(CV_results_BN_inf)
CV_results_BN_inf_gathered<-gather(data.frame(t(CV_results_BN_inf)))
CV_results_BN_inf_gathered$key<-factor(CV_results_BN_inf_gathered$key,
                                       levels = names(sort(package_divergences_informative,decreasing = TRUE)),
                                       ordered = TRUE)


informative<-ggplot(CV_results_BN_inf_gathered,aes(x=key,y=value+0.01e-10)) +
  geom_boxplot() +
  theme_classic() +
  theme(axis.text.x=element_text(angle=45,hjust=1)) +
  annotate("point",x=1:9,y=sort(package_divergences,decreasing = TRUE),color="red",size=4)#+
  #scale_y_continuous(trans='log10')


#+END_SRC
Amir says need marginal distribution of nodes which should be
univariate.

#+NAME: FourAnalyses
#+header: :width 1000 :height 1000 :R-dev-args
#+BEGIN_SRC R :session "global" :file FourAnalyses.png :results output graphics :exports both
plot_grid(univariate+ggtitle("T-test")+theme(axis.title.x = element_blank(),axis.text.x = element_text(size=14)),
          multivariate+ggtitle("PLS-DA")+theme(axis.title.x = element_blank(),axis.text.x = element_text(size=14)),
          uninformative+ggtitle("Uninformative prior")+theme(axis.title.x = element_blank(),axis.text.x = element_text(size=14)),
          informative+ggtitle("Informative prior")+theme(axis.title.x = element_blank(),axis.text.x = element_text(size=14)),
          ncol=2)

#+END_SRC

#+RESULTS: FourAnalyses
[[file:FourAnalyses.png]]
