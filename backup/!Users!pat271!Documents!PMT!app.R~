library(shiny)
library(shinythemes)
library(shinydashboard)
library(tidyverse)

############################################################################
## Card Deck                                                              ##
############################################################################

card_deck<-data.frame(Name = "Take 1 Item Card",
                      Detail = "Draw one item card from the top of the deck. Card limit is 7.",
                      Frequency = 30,
                      stringsAsFactors=FALSE)
card_deck<-rbind(card_deck,c("Chance Card",
                             "Choose one Pokemon of the color you landed on.",
                             5))
card_deck<-rbind(card_deck,c("Take 2 Item Cards",
                             "Draw two item cards from the top of the deck. Card limit is 7.",
                             7))
card_deck<-rbind(card_deck,c("Poisoned!",
                             "The Pokemon you fought most recently with faints!",
                             7))
card_deck<-rbind(card_deck,c("Robbed!",
                             "Discard two items.",
                             7))
card_deck<-rbind(card_deck,c("Homesick!",
                             "Immediately return to Pallet town.",
                             7))
card_deck<-rbind(card_deck,c("Let's Fight!",
                             "Fight a trainer battle with any other trainer.",
                             15))
card_deck<-rbind(card_deck,c("Revive",
                             "Revive a single pokemon.",
                             7))
card_deck<-rbind(card_deck,c("Pokemon Center",
                             "Revive all your pokemon.",
                             5))
card_deck<-rbind(card_deck,c("Find Water Stone",
                             "Evolve your poliwhirl, shellder, staryu or eevee.",
                             5))
card_deck<-rbind(card_deck,c("Find Leaf Stone",
                             "Evolve your weepinbell, exeggcute, or gloom.",
                             5))
card_deck<-rbind(card_deck,c("Find Fire Stone",
                             "Evolve your growlithe, vulpix, or eevee.",
                             5))
card_deck<-rbind(card_deck,c("Find Moon Stone",
                             "Evolve your nidorino/a, clefairy, or jigglypuff.",
                             5))
card_deck<-rbind(card_deck,c("Find Thunder Stone",
                             "Evolve your pikachu or eevee.",
                             5))
card_deck<-rbind(card_deck,c("Find Rare Candy",
                             "Evolve one (non-stone or trade) pokemon or level up a fully evolved pokemon",
                             2))
card_deck<-rbind(card_deck,c("Whirlwind",
                             "Send as many revealed wild pokemon on your color to the bank as you like and replace.",
                             7))
card_deck<-rbind(card_deck,c("New Quest",
                             "You may choose a new quest! Roll again to get a head start on your new quest.",
                             15))
card_deck<-rbind(card_deck,c("Looks like we're blasting off again!",
                             "Have a normal trainer battle. Afterwards, the winner can send the loser to any city that they have been to before.",
                             5))
card_deck<-rbind(card_deck,c("XP Share",
                             "Transfer up to 10 XP from one Pokemon of yours to another.",
                             5))

############################################################################
## Quest Deck                                                             ##
############################################################################
quest_deck<-data.frame(Name = "Bug-Catching Contest",
                      Detail = "Catch a bug pokemon to draw 3 items.",
                      Frequency = 1,
                      stringsAsFactors=FALSE)
quest_deck<-rbind(quest_deck,c("Fishing Contest",
                             "Catch a water pokemon to draw 3 items",
                             1))
quest_deck<-rbind(quest_deck,c("Safari Zone",
                             "Catch any 3 pokemon to win a rare candy",
                             1))
quest_deck<-rbind(quest_deck,c("Balanced Team",
                             "First trainer with a grass, fire and water pokemon in their party wins a rare candy. This can be won immediately. Tiebreaker is strength of the 3 pokemon.",
                             1))
quest_deck<-rbind(quest_deck,c("Catch a pink pokemon",
                             "Catch a pink pokemon to win a rare candy",
                             1))
quest_deck<-rbind(quest_deck,c("Catch a green pokemon",
                             "Catch a green pokemon to win a rare candy",
                             1))
quest_deck<-rbind(quest_deck,c("Catch a blue pokemon",
                             "Catch a blue pokemon to win a rare candy",
                             1))
quest_deck<-rbind(quest_deck,c("Catch a red pokemon",
                             "Catch a red pokemon to win a rare candy",
                             1))
quest_deck<-rbind(quest_deck,c("Fossil hunter",
                             "Travel to Cinnabar Island and pick an (unevolved) fossil pokemon.",
                             1))
quest_deck<-rbind(quest_deck,c("Golem Pokeswap",
                             "Trade Ditto, Tangela, Lickitung, Porygon, Pinsir or FarFetch'd and evolve your Graveler into a Golem.",
                             1))
quest_deck<-rbind(quest_deck,c("Alakazam Pokeswap",
                             "Trade Mr. Mime, Hitmonchan, Lapras, Snorlax or Jynx and evolve your Kadabra into an Alakazam.",
                             1))
quest_deck<-rbind(quest_deck,c("Gengar Pokeswap",
                             "Trade Onix, Chansey, Hitmonlee, Scyther, Magmar or Kangaskhan and evolve your Haunter into a Gengar.",
                             1))
quest_deck<-rbind(quest_deck,c("Machamp Pokeswap",
                             "Trade Tauros or Electabuzz and evolve your Machoke into a Machamp.",
                             1))
quest_deck<-rbind(quest_deck,c("Magikarp Jump",
                             "Defeat a red pokemon with your Magikarp to recieve 20 XP for your Magikarp.",
                             1))

############################################################################
## Plot frequencies                                                       ##
############################################################################
## class(card_deck$Frequency) = "integer"
## card_deck$Name<-factor(card_deck$Name, levels = c(card_deck$Name[order(card_deck$Frequency,decreasing=TRUE)]))
## ggplot(card_deck,aes(y=Frequency/sum(card_deck$Frequency),x=Name)) + geom_bar(stat="identity") + theme_classic() + theme(axis.text.x = element_text(angle=45,hjust=1))

############################################################################
## App                                                                    ##
############################################################################

server <- function(input, output) {
    N <- 10
    card_deck_reactive<-reactive({
        if(input$legendaries){
            card_deck_updated<-rbind(card_deck,c("Unknown Dungeon Pokemon",
                                         "Choose one yellow Pokemon chip and roll to catch.",
                                         7))
            return(card_deck_updated)
        }else{
            return(card_deck)
        }
    })

    result_val <- reactiveVal()
    observeEvent(input$drawCard,{
        result_val(NULL)
        withProgress(message = 'Drawing card...', {
            for(i in 1:N){
                Sys.sleep(.05)
                incProgress(1/N)
            }
            card_deck_reactive<-data.frame(card_deck_reactive())
            card_odds<-unlist(apply(card_deck_reactive, 1, function(x){
                return(rep(x[1],times = as.numeric(x[3])))
            }))
            draw<-as.vector(card_odds)[sample(length(card_odds),1)]
            result_val(card_deck_reactive %>% filter(Name == draw))
        })
    })
    
    output$eventCardHead <- renderText({
        return(result_val()[1,1])
    })     
    output$eventCardBody <- renderText({
        return(result_val()[1,2])
    })
    
    quest_val <- reactiveVal()
    draw_val <- reactiveVal()
    quest_deck_reactive <- reactiveVal(quest_deck)
    observeEvent(input$updateQuest,{
        quest_val(NULL)
        withProgress(message = 'Updating Quest...', {
            for(i in 1:N){
                Sys.sleep(.05)
                incProgress(1/N)
            }
            card_odds<-unlist(apply(quest_deck_reactive(), 1, function(x){
                return(rep(x[1],times = as.numeric(x[3])))
            }))
            index<-sample(length(card_odds),1)
            draw<-as.vector(card_odds)[index]
            quest_val(quest_deck_reactive() %>% filter(Name == draw))
            draw_val(index)
        })
    })
    observeEvent(input$clearQuest,{
        quest_deck_reactive(quest_deck_reactive()[-draw_val(),])
        quest_val(NULL)
        withProgress(message = 'Updating Quest...', {
            for(i in 1:N){
                Sys.sleep(.05)
                incProgress(1/N)
            }
            card_odds<-unlist(apply(quest_deck_reactive(), 1, function(x){
                return(rep(x[1],times = as.numeric(x[3])))
            }))
            index<-sample(length(card_odds),1)
            draw<-as.vector(card_odds)[index]
            quest_val(quest_deck_reactive() %>% filter(Name == draw))
            draw_val(index)
        })
    })
    output$questCardHead <- renderText({
        return(quest_val()[1,1])
    })     
    output$questCardBody <- renderText({
        return(quest_val()[1,2])
    })
}

ui <- dashboardPage(skin = "green",
                    dashboardHeader(title = "PMT Event Card!"),
                    dashboardSidebar(),
                    dashboardBody(
                        fluidRow(box(width = 12,
                            sidebarLayout(
                                sidebarPanel(
                                    actionButton("drawCard", "Draw a card!"),
                                    checkboxInput("legendaries", "Encounter legendary pokemon?",FALSE)
                                ),
                                mainPanel(textOutput("eventCardHead"),
                                          textOutput("eventCardBody"))
                            )
                        ),
                        tags$head(tags$style("#eventCardBody{color: black;
                                 font-size: 32px;
                                 font-style: italic;
                                 }
                                 #eventCardHead{color: green;
                                 font-size: 48px;
                                 font-style: bold;
                                 }
                                 #questCardHead{color: blue;
                                 font-size: 48px;
                                 font-style: bold;
                                 }
                                 #questCardBody{color: black;
                                 font-size: 32px;
                                 font-style: italic;
                                 }"
                                 )                              
                                 )
                        ),
                        fluidRow(box(width=12,
                                     title = strong("Current Quest"),
                                     solidHeader = T,
                                     status = "primary",
                                     sidebarLayout(
                                         sidebarPanel(
                                             actionButton("updateQuest","New Quest!"),
                                             actionButton("clearQuest","Quest Completed!")
                                         ),
                                         mainPanel(textOutput("questCardHead"),
                                                   textOutput("questCardBody"))
                                     )))
                    )
                    )
shinyApp(ui = ui, server = server)







